{
  "address": "0x3b714fa316AFF16566E7eFe26D41E4505DCa6ef6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_managerContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_betVault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxLossPerTimePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LiquidityPool__AccessForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidityPool__NotAllowedAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidityPool__NotEnoughFreeSuppy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidityPool__VaultNotValid",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedPerExpTime",
          "type": "uint256"
        }
      ],
      "name": "LockedSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxLoss",
          "type": "uint256"
        }
      ],
      "name": "MaxLossPerTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calcSharesToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "calcTokensToWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositForAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedPerExpTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managerContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLPLost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLostPerTimeInPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "redeemSharesForAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        }
      ],
      "name": "resetLockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferTokensToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_delta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_increase",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        }
      ],
      "name": "updateLockedTokenSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxLoss",
          "type": "uint256"
        }
      ],
      "name": "updateMaxLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_profit",
          "type": "bool"
        }
      ],
      "name": "updateTokenSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validVaults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbe7998d388cafb16197fbd49a43fbb771e068502578360ed21fe1a52490c4bbb",
  "receipt": {
    "to": null,
    "from": "0x36375828fd821935cFf3E8AB6322cAb54BBfaDeC",
    "contractAddress": "0x3b714fa316AFF16566E7eFe26D41E4505DCa6ef6",
    "transactionIndex": 4,
    "gasUsed": "1354372",
    "logsBloom": "0x
    "blockHash": "0x3b3c2b2485ea25251b632d3c25d0c4f4547d1bce3ffb289f5f6633d32298fe4a",
    "transactionHash": "0xbe7998d388cafb16197fbd49a43fbb771e068502578360ed21fe1a52490c4bbb",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 38728798,
        "transactionHash": "0xbe7998d388cafb16197fbd49a43fbb771e068502578360ed21fe1a52490c4bbb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000036375828fd821935cff3e8ab6322cab54bbfadec",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000737b0f4ee3c00000000000000000000000000000000000000000000000000021becd330fb052c000000000000000000000000000000000000000000002124b7622d15c4cc03dd0000000000000000000000000000000000000000000000000214b5223c0cc92c000000000000000000000000000000000000000000002124b76964c6b9ba3fdd",
        "logIndex": 10,
        "blockHash": "0x3b3c2b2485ea25251b632d3c25d0c4f4547d1bce3ffb289f5f6633d32298fe4a"
      }
    ],
    "blockNumber": 38728798,
    "cumulativeGasUsed": "2057945",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb5AF355C2bfB59E2FE3D7a8CE69051598976f3f6",
    "0xEAaDaE282b1131E80621Bba7AA4F754978C74962",
    "0xa21a4E7B8fBdafFb08600294c9d79103703B2E4f",
    50000
  ],
  "numDeployments": 1,
  "solcInputHash": "53f1828098b4e683de7dd41c78889542",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_betVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLossPerTimePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LiquidityPool__AccessForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityPool__NotAllowedAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityPool__NotEnoughFreeSuppy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityPool__VaultNotValid\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedPerExpTime\",\"type\":\"uint256\"}],\"name\":\"LockedSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxLoss\",\"type\":\"uint256\"}],\"name\":\"MaxLossPerTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcSharesToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calcTokensToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedPerExpTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLPLost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLostPerTimeInPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"redeemSharesForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"}],\"name\":\"resetLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokensToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_increase\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"}],\"name\":\"updateLockedTokenSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxLoss\",\"type\":\"uint256\"}],\"name\":\"updateMaxLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_profit\",\"type\":\"bool\"}],\"name\":\"updateTokenSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validVaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/LiquidityPool.sol\":\"LiquidityPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/core/LiquidityPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../interface/core/ILiquidityPool.sol\\\";\\r\\n\\r\\nerror LiquidityPool__AccessForbidden();\\r\\nerror LiquidityPool__NotAllowedAmount();\\r\\nerror LiquidityPool__NotEnoughFreeSuppy();\\r\\nerror LiquidityPool__VaultNotValid();\\r\\n\\r\\ncontract LiquidityPool is ERC20, ILiquidityPool {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private constant MULTIPLIER = 1000000;\\r\\n\\r\\n    /* ====== State Variables ====== */\\r\\n\\r\\n    uint256 public totalTokenSupply;\\r\\n    uint256 public lockedTokenSupply;\\r\\n\\r\\n    uint256 public maxLostPerTimeInPercent; // in ppm (parts per million). 50.000 ppm = 5% = 0,050000\\r\\n\\r\\n    // uint256 public maxLPLostPerTime;\\r\\n\\r\\n    address public token;\\r\\n    address public managerContract;\\r\\n    mapping(address => bool) public validVaults;\\r\\n\\r\\n    mapping(uint256 => uint256) public lockedPerExpTime;\\r\\n\\r\\n    /* ====== Events ====== */\\r\\n    event Deposit(address indexed account, uint256 amount, uint256 shares, uint256 totalTokens, uint256 totalSupply);\\r\\n    event Redeem(address indexed account, uint256 shares, uint256 amount, uint256 totalTokens, uint256 totalSupply);\\r\\n    event LockedSupplyUpdated(uint256 lockedTokenSupply, uint256 expTime, uint256 lockedPerExpTime);\\r\\n    event MaxLossPerTimeUpdated(uint256 newMaxLoss);\\r\\n\\r\\n    /* ====== Modifier ====== */\\r\\n\\r\\n    constructor(\\r\\n        address _managerContract,\\r\\n        address _token,\\r\\n        address _betVault,\\r\\n        uint256 _maxLossPerTimePercent\\r\\n    ) ERC20(\\\"DefiB\\\", \\\"DefiB\\\") {\\r\\n        managerContract = _managerContract;\\r\\n        token = _token;\\r\\n        validVaults[_betVault] = true;\\r\\n        maxLostPerTimeInPercent = _maxLossPerTimePercent;\\r\\n    }\\r\\n\\r\\n    /* ====== Main Functions ====== */\\r\\n\\r\\n    function depositForAccount(address _account, uint256 _amount) external {\\r\\n        _isManagerContract();\\r\\n\\r\\n        uint256 _shares = calcSharesToMint(_amount);\\r\\n\\r\\n        IERC20(token).transferFrom(_account, address(this), _amount);\\r\\n\\r\\n        _mint(_account, _shares);\\r\\n\\r\\n        totalTokenSupply = totalTokenSupply.add(_amount);\\r\\n\\r\\n        emit Deposit(_account, _amount, _shares, balanceTokens(), totalSupply());\\r\\n    }\\r\\n\\r\\n    function redeemSharesForAccount(address _account, uint256 _shares) external {\\r\\n        _isManagerContract();\\r\\n\\r\\n        _isValidAmount(_account, _shares);\\r\\n\\r\\n        uint256 _tokens = calcTokensToWithdraw(_shares);\\r\\n\\r\\n        _isEnoughFreeTokenSupply(_tokens);\\r\\n\\r\\n        _burn(_account, _shares);\\r\\n\\r\\n        IERC20(token).transfer(_account, _tokens);\\r\\n\\r\\n        emit Redeem(_account, _shares, _tokens, balanceTokens(), totalSupply());\\r\\n    }\\r\\n\\r\\n    function updateTokenSupply(address _vault, uint256 _amount, bool _profit) external {\\r\\n        _isManagerContract();\\r\\n\\r\\n        if (_profit) {\\r\\n            totalTokenSupply = totalTokenSupply.add(_amount);\\r\\n        } else {\\r\\n            IERC20(token).transfer(_vault, _amount);\\r\\n\\r\\n            totalTokenSupply = totalTokenSupply.sub(_amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateLockedTokenSupply(uint256 _delta, bool _increase, uint256 _expTime) external {\\r\\n        _isManagerContract();\\r\\n\\r\\n        uint256 _lockedTokenSupply = lockedTokenSupply;\\r\\n\\r\\n        lockedTokenSupply = _increase ? _lockedTokenSupply.add(_delta) : _lockedTokenSupply.sub(lockedTokenSupply);\\r\\n\\r\\n        uint256 _lockedPerExpTime = lockedPerExpTime[_expTime];\\r\\n\\r\\n        lockedPerExpTime[_expTime] = _increase\\r\\n            ? _lockedPerExpTime.add(_delta)\\r\\n            : _lockedPerExpTime.sub(lockedTokenSupply);\\r\\n\\r\\n        emit LockedSupplyUpdated(lockedTokenSupply, _expTime, lockedPerExpTime[_expTime]);\\r\\n    }\\r\\n\\r\\n    function transferTokensToVault(address _vault, uint256 _amount) external {\\r\\n        _isManagerContract();\\r\\n        _isValidVault(_vault);\\r\\n\\r\\n        IERC20(token).transfer(_vault, _amount);\\r\\n        uint256 _tokenSupply = totalTokenSupply;\\r\\n        totalTokenSupply = _tokenSupply.sub(_amount);\\r\\n    }\\r\\n\\r\\n    function resetLockedTokens(uint256 _expTime) external {\\r\\n        _isManagerContract();\\r\\n\\r\\n        uint256 _resetValue = lockedPerExpTime[_expTime];\\r\\n\\r\\n        uint256 _totalLockedTokens = lockedTokenSupply;\\r\\n\\r\\n        lockedTokenSupply = _totalLockedTokens.sub(_resetValue);\\r\\n        lockedPerExpTime[_expTime] = 0;\\r\\n\\r\\n        emit LockedSupplyUpdated(lockedTokenSupply, _expTime, lockedPerExpTime[_expTime]);\\r\\n    }\\r\\n\\r\\n    function updateMaxLoss(uint256 _newMaxLoss) external {\\r\\n        _isManagerContract();\\r\\n\\r\\n        maxLostPerTimeInPercent = _newMaxLoss;\\r\\n\\r\\n        emit MaxLossPerTimeUpdated(_newMaxLoss);\\r\\n    }\\r\\n\\r\\n    /* ====== Internal Functions ====== */\\r\\n\\r\\n    function _isManagerContract() internal view {\\r\\n        if (msg.sender != managerContract) {\\r\\n            revert LiquidityPool__AccessForbidden();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isValidAmount(address _account, uint256 _amount) internal view {\\r\\n        uint256 _balance = balanceOf(_account);\\r\\n        if (_balance < _amount) {\\r\\n            revert LiquidityPool__NotAllowedAmount();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isEnoughFreeTokenSupply(uint256 _amount) internal view {\\r\\n        if (totalTokenSupply.sub(lockedTokenSupply) < _amount) {\\r\\n            revert LiquidityPool__NotEnoughFreeSuppy();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isValidVault(address _vault) internal view {\\r\\n        if (validVaults[_vault] == false) {\\r\\n            revert LiquidityPool__VaultNotValid();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ====== Pure/View Functions ====== */\\r\\n\\r\\n    function calcSharesToMint(uint256 _amount) public view returns (uint256) {\\r\\n        /*\\r\\n        a = amount\\r\\n        B = balance of token before deposit\\r\\n        T = total supply\\r\\n        s = shares to mint\\r\\n\\r\\n        (T + s) / T = (a + B) / B \\r\\n\\r\\n        s = aT / B\\r\\n        */\\r\\n        if (balanceTokens() == 0) {\\r\\n            return _amount;\\r\\n        }\\r\\n\\r\\n        return _amount.mul(totalTokenSupply).div(balanceTokens());\\r\\n    }\\r\\n\\r\\n    function calcTokensToWithdraw(uint256 _shares) public view returns (uint256) {\\r\\n        /*\\r\\n        a = amount\\r\\n        B = balance of token before withdraw\\r\\n        T = total supply\\r\\n        s = shares to burn\\r\\n\\r\\n        (T - s) / T = (B - a) / B \\r\\n\\r\\n        a = sB / T\\r\\n        */\\r\\n\\r\\n        return _shares.mul(totalTokenSupply).div(totalSupply());\\r\\n    }\\r\\n\\r\\n    function balanceTokens() public view returns (uint256) {\\r\\n        return IERC20(token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function maxLPLost() public view returns (uint256) {\\r\\n        return maxLostPerTimeInPercent;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8075e3128f32546e138090d68c6252256b2aca346f4b687257205baa9d7d7a1f\",\"license\":\"MIT\"},\"contracts/interface/core/ILiquidityPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ILiquidityPool is IERC20 {\\r\\n    function totalTokenSupply() external view returns (uint256);\\r\\n\\r\\n    function lockedTokenSupply() external view returns (uint256);\\r\\n\\r\\n    function maxLPLost() external returns (uint256);\\r\\n\\r\\n    function depositForAccount(address _account, uint256 _amount) external;\\r\\n\\r\\n    function redeemSharesForAccount(address _account, uint256 _shares) external;\\r\\n\\r\\n    function transferTokensToVault(address _vault, uint256 _amount) external;\\r\\n\\r\\n    function updateLockedTokenSupply(uint256 _delta, bool _increase, uint256 _expTime) external;\\r\\n\\r\\n    function resetLockedTokens(uint256 _expTime) external;\\r\\n\\r\\n    function updateMaxLoss(uint256 _newMaxLoss) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8305fc550f7a3dfdba3fbb5b59f1a4de540cf787d1d9401de51be7e4597721d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620017b1380380620017b18339810160408190526200003491620000f4565b6040805180820182526005808252642232b334a160d91b6020808401829052845180860190955291845290830152906003620000718382620001eb565b506004620000808282620001eb565b5050600980546001600160a01b03199081166001600160a01b0397881617909155600880549091169486169490941790935592166000908152600a60205260409020805460ff1916600117905550600755620002b7565b80516001600160a01b0381168114620000ef57600080fd5b919050565b600080600080608085870312156200010b57600080fd5b6200011685620000d7565b93506200012660208601620000d7565b92506200013660408601620000d7565b6060959095015193969295505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200017157607f821691505b6020821081036200019257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001e657600081815260208120601f850160051c81016020861015620001c15750805b601f850160051c820191505b81811015620001e257828155600101620001cd565b5050505b505050565b81516001600160401b0381111562000207576200020762000146565b6200021f816200021884546200015c565b8462000198565b602080601f8311600181146200025757600084156200023e5750858301515b600019600386901b1c1916600185901b178555620001e2565b600085815260208120601f198616915b82811015620002885788860151825594840194600190910190840162000267565b5085821015620002a75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6114ea80620002c76000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80633950935111610104578063a66dee9c116100a2578063dd62ed3e11610071578063dd62ed3e146103de578063e4494a0f14610417578063f928d5421461041f578063fc0c546a1461043257600080fd5b8063a66dee9c14610392578063a9059cbb146103a5578063ae074a09146103b8578063d830de97146103cb57600080fd5b80637740b216116100de5780637740b2161461035c57806383b8e9221461036f57806395d89b4114610377578063a457c2d71461037f57600080fd5b806339509351146102fd5780636657fc671461031057806370a082311461033357600080fd5b80631ca8b6cb1161017157806330a22e5f1161014b57806330a22e5f146102bf578063313ce567146102d2578063342fcda9146102e157806339133952146102f457600080fd5b80631ca8b6cb1461027857806323b872dd146102815780632710ac801461029457600080fd5b80630e3b2fcf116101ad5780630e3b2fcf1461023f5780630ebc06ce1461025457806318160ddd146102675780631b137b3a1461026f57600080fd5b806305895bef146101d457806306fdde0314610207578063095ea7b31461021c575b600080fd5b6101f46101e2366004611212565b600b6020526000908152604090205481565b6040519081526020015b60405180910390f35b61020f610445565b6040516101fe919061122b565b61022f61022a366004611295565b6104d7565b60405190151581526020016101fe565b61025261024d3660046112cd565b6104f1565b005b6101f4610262366004611212565b61059e565b6002546101f4565b6101f460075481565b6101f460055481565b61022f61028f36600461130d565b6105c0565b6009546102a7906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b6102526102cd366004611295565b6105e4565b604051601281526020016101fe565b6102526102ef366004611295565b61067a565b6101f460065481565b61022f61030b366004611295565b610787565b61022f61031e366004611349565b600a6020526000908152604090205460ff1681565b6101f4610341366004611349565b6001600160a01b031660009081526020819052604090205490565b61025261036a366004611364565b6107c6565b6007546101f4565b61020f610883565b61022f61038d366004611295565b610892565b6102526103a0366004611295565b610941565b61022f6103b3366004611295565b610a20565b6101f46103c6366004611212565b610a2e565b6102526103d9366004611212565b610a4e565b6101f46103ec36600461139c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101f4610ace565b61025261042d366004611212565b610b40565b6008546102a7906001600160a01b031681565b606060038054610454906113cf565b80601f0160208091040260200160405190810160405280929190818152602001828054610480906113cf565b80156104cd5780601f106104a2576101008083540402835291602001916104cd565b820191906000526020600020905b8154815290600101906020018083116104b057829003601f168201915b5050505050905090565b6000336104e5818585610b83565b60019150505b92915050565b6104f9610ca7565b80156105145760055461050c9083610cd4565b600555505050565b60085460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015610567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058b9190611409565b5060055461050c9083610ce7565b505050565b60006104eb6105ac60025490565b6005546105ba908590610cf3565b90610cff565b6000336105ce858285610d0b565b6105d9858585610d9d565b506001949350505050565b6105ec610ca7565b6105f582610f70565b60085460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015610648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066c9190611409565b5060055461050c8183610ce7565b610682610ca7565b600061068d82610a2e565b6008546040516323b872dd60e01b81526001600160a01b038681166004830152306024830152604482018690529293509116906323b872dd906064016020604051808303816000875af11580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c9190611409565b506107178382610fb0565b6005546107249083610cd4565b6005556001600160a01b0383167f7162984403f6c73c8639375d45a9187dfd04602231bd8e587c415718b5f7e5f9838361075c610ace565b60025460408051948552602085019390935291830152606082015260800160405180910390a2505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906104e590829086906107c190879061143c565b610b83565b6107ce610ca7565b600654826107e9576006546107e4908290610ce7565b6107f3565b6107f38185610cd4565b6006556000828152600b60205260409020548361081d57600654610818908290610ce7565b610827565b6108278186610cd4565b6000848152600b6020908152604091829020839055600654825190815290810186905280820192909252517fd0eaf4b7b6943769683e00aa39f6a6fb7a226ef621ba58adbdeea91e977fee3b9181900360600190a15050505050565b606060048054610454906113cf565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156109345760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6105d98286868403610b83565b610949610ca7565b610953828261106f565b600061095e8261059e565b9050610969816110a9565b61097383836110e0565b60085460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156109c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ea9190611409565b50826001600160a01b03167fe02f6383e19e87c24e0c03e2cd5dbd05156cb29a1b0f3dbca1fa3430e444f63d838361075c610ace565b6000336104e5818585610d9d565b6000610a38610ace565b600003610a43575090565b6104eb6105ac610ace565b610a56610ca7565b6000818152600b6020526040902054600654610a728183610ce7565b60069081556000848152600b6020908152604080832083905592548351908152908101869052918201527fd0eaf4b7b6943769683e00aa39f6a6fb7a226ef621ba58adbdeea91e977fee3b9060600160405180910390a1505050565b6008546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b919061144f565b905090565b610b48610ca7565b60078190556040518181527ff2c9646662ff29ce338193588962b9f715f4fcf984b10acaf54c65424a674afa9060200160405180910390a150565b6001600160a01b038316610be55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161092b565b6001600160a01b038216610c465760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161092b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6009546001600160a01b03163314610cd257604051630cf4a9a760e41b815260040160405180910390fd5b565b6000610ce0828461143c565b9392505050565b6000610ce08284611468565b6000610ce0828461147b565b6000610ce08284611492565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610d975781811015610d8a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161092b565b610d978484848403610b83565b50505050565b6001600160a01b038316610e195760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161092b565b6001600160a01b038216610e7b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161092b565b6001600160a01b03831660009081526020819052604090205481811015610f0a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161092b565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610d97565b6001600160a01b0381166000908152600a602052604081205460ff1615159003610fad5760405163d7ea757b60e01b815260040160405180910390fd5b50565b6001600160a01b0382166110065760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161092b565b8060026000828254611018919061143c565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038216600090815260208190526040902054818110156105995760405163023175b160e41b815260040160405180910390fd5b806110c1600654600554610ce790919063ffffffff16565b1015610fad57604051630cc3fe5160e21b815260040160405180910390fd5b6001600160a01b0382166111405760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161092b565b6001600160a01b038216600090815260208190526040902054818110156111b45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161092b565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b60006020828403121561122457600080fd5b5035919050565b600060208083528351808285015260005b818110156112585785810183015185820160400152820161123c565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461129057600080fd5b919050565b600080604083850312156112a857600080fd5b6112b183611279565b946020939093013593505050565b8015158114610fad57600080fd5b6000806000606084860312156112e257600080fd5b6112eb84611279565b9250602084013591506040840135611302816112bf565b809150509250925092565b60008060006060848603121561132257600080fd5b61132b84611279565b925061133960208501611279565b9150604084013590509250925092565b60006020828403121561135b57600080fd5b610ce082611279565b60008060006060848603121561137957600080fd5b83359250602084013561138b816112bf565b929592945050506040919091013590565b600080604083850312156113af57600080fd5b6113b883611279565b91506113c660208401611279565b90509250929050565b600181811c908216806113e357607f821691505b60208210810361140357634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561141b57600080fd5b8151610ce0816112bf565b634e487b7160e01b600052601160045260246000fd5b808201808211156104eb576104eb611426565b60006020828403121561146157600080fd5b5051919050565b818103818111156104eb576104eb611426565b80820281158282048414176104eb576104eb611426565b6000826114af57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220fcbc7760e3f034da7212ce6124e61dddd203b88cb3ea75c73b7b120bf904ddee64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80633950935111610104578063a66dee9c116100a2578063dd62ed3e11610071578063dd62ed3e146103de578063e4494a0f14610417578063f928d5421461041f578063fc0c546a1461043257600080fd5b8063a66dee9c14610392578063a9059cbb146103a5578063ae074a09146103b8578063d830de97146103cb57600080fd5b80637740b216116100de5780637740b2161461035c57806383b8e9221461036f57806395d89b4114610377578063a457c2d71461037f57600080fd5b806339509351146102fd5780636657fc671461031057806370a082311461033357600080fd5b80631ca8b6cb1161017157806330a22e5f1161014b57806330a22e5f146102bf578063313ce567146102d2578063342fcda9146102e157806339133952146102f457600080fd5b80631ca8b6cb1461027857806323b872dd146102815780632710ac801461029457600080fd5b80630e3b2fcf116101ad5780630e3b2fcf1461023f5780630ebc06ce1461025457806318160ddd146102675780631b137b3a1461026f57600080fd5b806305895bef146101d457806306fdde0314610207578063095ea7b31461021c575b600080fd5b6101f46101e2366004611212565b600b6020526000908152604090205481565b6040519081526020015b60405180910390f35b61020f610445565b6040516101fe919061122b565b61022f61022a366004611295565b6104d7565b60405190151581526020016101fe565b61025261024d3660046112cd565b6104f1565b005b6101f4610262366004611212565b61059e565b6002546101f4565b6101f460075481565b6101f460055481565b61022f61028f36600461130d565b6105c0565b6009546102a7906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b6102526102cd366004611295565b6105e4565b604051601281526020016101fe565b6102526102ef366004611295565b61067a565b6101f460065481565b61022f61030b366004611295565b610787565b61022f61031e366004611349565b600a6020526000908152604090205460ff1681565b6101f4610341366004611349565b6001600160a01b031660009081526020819052604090205490565b61025261036a366004611364565b6107c6565b6007546101f4565b61020f610883565b61022f61038d366004611295565b610892565b6102526103a0366004611295565b610941565b61022f6103b3366004611295565b610a20565b6101f46103c6366004611212565b610a2e565b6102526103d9366004611212565b610a4e565b6101f46103ec36600461139c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101f4610ace565b61025261042d366004611212565b610b40565b6008546102a7906001600160a01b031681565b606060038054610454906113cf565b80601f0160208091040260200160405190810160405280929190818152602001828054610480906113cf565b80156104cd5780601f106104a2576101008083540402835291602001916104cd565b820191906000526020600020905b8154815290600101906020018083116104b057829003601f168201915b5050505050905090565b6000336104e5818585610b83565b60019150505b92915050565b6104f9610ca7565b80156105145760055461050c9083610cd4565b600555505050565b60085460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015610567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058b9190611409565b5060055461050c9083610ce7565b505050565b60006104eb6105ac60025490565b6005546105ba908590610cf3565b90610cff565b6000336105ce858285610d0b565b6105d9858585610d9d565b506001949350505050565b6105ec610ca7565b6105f582610f70565b60085460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015610648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066c9190611409565b5060055461050c8183610ce7565b610682610ca7565b600061068d82610a2e565b6008546040516323b872dd60e01b81526001600160a01b038681166004830152306024830152604482018690529293509116906323b872dd906064016020604051808303816000875af11580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c9190611409565b506107178382610fb0565b6005546107249083610cd4565b6005556001600160a01b0383167f7162984403f6c73c8639375d45a9187dfd04602231bd8e587c415718b5f7e5f9838361075c610ace565b60025460408051948552602085019390935291830152606082015260800160405180910390a2505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906104e590829086906107c190879061143c565b610b83565b6107ce610ca7565b600654826107e9576006546107e4908290610ce7565b6107f3565b6107f38185610cd4565b6006556000828152600b60205260409020548361081d57600654610818908290610ce7565b610827565b6108278186610cd4565b6000848152600b6020908152604091829020839055600654825190815290810186905280820192909252517fd0eaf4b7b6943769683e00aa39f6a6fb7a226ef621ba58adbdeea91e977fee3b9181900360600190a15050505050565b606060048054610454906113cf565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156109345760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6105d98286868403610b83565b610949610ca7565b610953828261106f565b600061095e8261059e565b9050610969816110a9565b61097383836110e0565b60085460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156109c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ea9190611409565b50826001600160a01b03167fe02f6383e19e87c24e0c03e2cd5dbd05156cb29a1b0f3dbca1fa3430e444f63d838361075c610ace565b6000336104e5818585610d9d565b6000610a38610ace565b600003610a43575090565b6104eb6105ac610ace565b610a56610ca7565b6000818152600b6020526040902054600654610a728183610ce7565b60069081556000848152600b6020908152604080832083905592548351908152908101869052918201527fd0eaf4b7b6943769683e00aa39f6a6fb7a226ef621ba58adbdeea91e977fee3b9060600160405180910390a1505050565b6008546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b919061144f565b905090565b610b48610ca7565b60078190556040518181527ff2c9646662ff29ce338193588962b9f715f4fcf984b10acaf54c65424a674afa9060200160405180910390a150565b6001600160a01b038316610be55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161092b565b6001600160a01b038216610c465760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161092b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6009546001600160a01b03163314610cd257604051630cf4a9a760e41b815260040160405180910390fd5b565b6000610ce0828461143c565b9392505050565b6000610ce08284611468565b6000610ce0828461147b565b6000610ce08284611492565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610d975781811015610d8a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161092b565b610d978484848403610b83565b50505050565b6001600160a01b038316610e195760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161092b565b6001600160a01b038216610e7b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161092b565b6001600160a01b03831660009081526020819052604090205481811015610f0a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161092b565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610d97565b6001600160a01b0381166000908152600a602052604081205460ff1615159003610fad5760405163d7ea757b60e01b815260040160405180910390fd5b50565b6001600160a01b0382166110065760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161092b565b8060026000828254611018919061143c565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038216600090815260208190526040902054818110156105995760405163023175b160e41b815260040160405180910390fd5b806110c1600654600554610ce790919063ffffffff16565b1015610fad57604051630cc3fe5160e21b815260040160405180910390fd5b6001600160a01b0382166111405760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161092b565b6001600160a01b038216600090815260208190526040902054818110156111b45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161092b565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b60006020828403121561122457600080fd5b5035919050565b600060208083528351808285015260005b818110156112585785810183015185820160400152820161123c565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461129057600080fd5b919050565b600080604083850312156112a857600080fd5b6112b183611279565b946020939093013593505050565b8015158114610fad57600080fd5b6000806000606084860312156112e257600080fd5b6112eb84611279565b9250602084013591506040840135611302816112bf565b809150509250925092565b60008060006060848603121561132257600080fd5b61132b84611279565b925061133960208501611279565b9150604084013590509250925092565b60006020828403121561135b57600080fd5b610ce082611279565b60008060006060848603121561137957600080fd5b83359250602084013561138b816112bf565b929592945050506040919091013590565b600080604083850312156113af57600080fd5b6113b883611279565b91506113c660208401611279565b90509250929050565b600181811c908216806113e357607f821691505b60208210810361140357634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561141b57600080fd5b8151610ce0816112bf565b634e487b7160e01b600052601160045260246000fd5b808201808211156104eb576104eb611426565b60006020828403121561146157600080fd5b5051919050565b818103818111156104eb576104eb611426565b80820281158282048414176104eb576104eb611426565b6000826114af57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220fcbc7760e3f034da7212ce6124e61dddd203b88cb3ea75c73b7b120bf904ddee64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 282,
        "contract": "contracts/core/LiquidityPool.sol:LiquidityPool",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 288,
        "contract": "contracts/core/LiquidityPool.sol:LiquidityPool",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 290,
        "contract": "contracts/core/LiquidityPool.sol:LiquidityPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 292,
        "contract": "contracts/core/LiquidityPool.sol:LiquidityPool",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 294,
        "contract": "contracts/core/LiquidityPool.sol:LiquidityPool",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7328,
        "contract": "contracts/core/LiquidityPool.sol:LiquidityPool",
        "label": "totalTokenSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7330,
        "contract": "contracts/core/LiquidityPool.sol:LiquidityPool",
        "label": "lockedTokenSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7332,
        "contract": "contracts/core/LiquidityPool.sol:LiquidityPool",
        "label": "maxLostPerTimeInPercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7334,
        "contract": "contracts/core/LiquidityPool.sol:LiquidityPool",
        "label": "token",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 7336,
        "contract": "contracts/core/LiquidityPool.sol:LiquidityPool",
        "label": "managerContract",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 7340,
        "contract": "contracts/core/LiquidityPool.sol:LiquidityPool",
        "label": "validVaults",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7344,
        "contract": "contracts/core/LiquidityPool.sol:LiquidityPool",
        "label": "lockedPerExpTime",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}