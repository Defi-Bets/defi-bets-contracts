{
  "address": "0xF62E4eA5E6c0d3aD7f8069Ac78715556752F262e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_underlying",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "name": "getStartedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        }
      ],
      "name": "updateAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb77292e70c7072a114ca5a9a83f3642ff287c67a7b72a13bfd5106d399a88a8b",
  "receipt": {
    "to": null,
    "from": "0xb0bCaC494d57ad4DD8B53fBa84a670bFe3393CeD",
    "contractAddress": "0xF62E4eA5E6c0d3aD7f8069Ac78715556752F262e",
    "transactionIndex": 0,
    "gasUsed": "535242",
    "logsBloom": "0x
    "blockHash": "0x471fc5583f185c5488787a4be5e4bd73434fa4742f00caec6909e05a9f53473a",
    "transactionHash": "0xb77292e70c7072a114ca5a9a83f3642ff287c67a7b72a13bfd5106d399a88a8b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8345,
        "transactionHash": "0xb77292e70c7072a114ca5a9a83f3642ff287c67a7b72a13bfd5106d399a88a8b",
        "address": "0xF62E4eA5E6c0d3aD7f8069Ac78715556752F262e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b0bcac494d57ad4dd8b53fba84a670bfe3393ced"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x471fc5583f185c5488787a4be5e4bd73434fa4742f00caec6909e05a9f53473a"
      }
    ],
    "blockNumber": 8345,
    "cumulativeGasUsed": "535242",
    "status": 1,
    "byzantium": true
  },
  "args": [
    18,
    "Price Oracle",
    1,
    "BTC"
  ],
  "numDeployments": 1,
  "solcInputHash": "87949d572d64d2aacbbc4318909667d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_underlying\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"name\":\"getStartedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"}],\"name\":\"updateAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/BTCPriceOracle.sol\":\"BTCPriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/oracles/BTCPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"./DefiBetOracle.sol\\\";\\r\\n\\r\\ncontract BTCPriceOracle is DefiBetOracle {\\r\\n    \\r\\n    string public underlying;\\r\\n\\r\\n    constructor(uint8 _decimals,string memory _description,uint256 _version,string memory _underlying) DefiBetOracle(_decimals,_description,_version){\\r\\n        underlying = _underlying;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3250e1d04d17e03af5f72ff02a8a7608d08f396407681a7d6776b7c2efd5a3d2\",\"license\":\"MIT\"},\"contracts/oracles/DefiBetOracle.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract DefiBetOracle is AggregatorV3Interface,Ownable {\\r\\n    \\r\\n    uint8 public decimals;\\r\\n    uint80 private latestRound;\\r\\n    uint256 public version;\\r\\n    string public description;\\r\\n\\r\\n    mapping(uint80 => int256) public getAnswer;\\r\\n    mapping(uint80 => uint256) public getTimestamp;\\r\\n    mapping(uint80 => uint256) public getStartedAt;\\r\\n\\r\\n    constructor(uint8 _decimals,string memory _description,uint256 _version){\\r\\n      decimals = _decimals;\\r\\n      description = _description;\\r\\n      version = _version;\\r\\n\\r\\n    }\\r\\n\\r\\n    function updateAnswer(int256 _answer) public onlyOwner{\\r\\n        latestRound++;\\r\\n        getAnswer[latestRound] = _answer;\\r\\n        getTimestamp[latestRound] = block.timestamp;\\r\\n        getStartedAt[latestRound] = block.timestamp;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getRoundData(uint80 _roundId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    ){\\r\\n      return ( _roundId,\\r\\n            getAnswer[_roundId],\\r\\n            getStartedAt[_roundId],\\r\\n            getTimestamp[_roundId],\\r\\n            _roundId\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    ){\\r\\n      return (\\r\\n            latestRound,\\r\\n            getAnswer[latestRound],\\r\\n            getStartedAt[latestRound],\\r\\n            getTimestamp[latestRound],\\r\\n            latestRound\\r\\n        );\\r\\n    }\\r\\n}\",\"keccak256\":\"0xab11446b1cf747002bc97ec84bdd25c142641322a8ac5492d2cfb516de418d53\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000a6238038062000a6283398101604081905262000034916200019d565b838383620000423362000088565b6000805460ff60a01b1916600160a01b60ff8616021790556002620000688382620002ba565b5060015550600690506200007d8282620002ba565b505050505062000386565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200010057600080fd5b81516001600160401b03808211156200011d576200011d620000d8565b604051601f8301601f19908116603f01168101908282118183101715620001485762000148620000d8565b816040528381526020925086838588010111156200016557600080fd5b600091505b838210156200018957858201830151818301840152908201906200016a565b600093810190920192909252949350505050565b60008060008060808587031215620001b457600080fd5b845160ff81168114620001c657600080fd5b60208601519094506001600160401b0380821115620001e457600080fd5b620001f288838901620000ee565b94506040870151935060608701519150808211156200021057600080fd5b506200021f87828801620000ee565b91505092959194509250565b600181811c908216806200024057607f821691505b6020821081036200026157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002b557600081815260208120601f850160051c81016020861015620002905750805b601f850160051c820191505b81811015620002b1578281556001016200029c565b5050505b505050565b81516001600160401b03811115620002d657620002d6620000d8565b620002ee81620002e784546200022b565b8462000267565b602080601f8311600181146200032657600084156200030d5750858301515b600019600386901b1c1916600185901b178555620002b1565b600085815260208120601f198616915b82811015620003575788860151825594840194600190910190840162000336565b5085821015620003765787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6106cc80620003966000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80637284e4161161008c578063a87a20ce11610066578063a87a20ce14610237578063f2fde38b1461024a578063f35bfacd1461025d578063feaf968c1461027d57600080fd5b80637284e416146101965780638da5cb5b1461019e5780639a6fc8f5146101b957600080fd5b806354fd4d50116100bd57806354fd4d501461016e5780636f307dc314610177578063715018a61461018c57600080fd5b80630387c6a5146100e45780631acce90314610117578063313ce56714610137575b600080fd5b6101046100f2366004610562565b60056020526000908152604090205481565b6040519081526020015b60405180910390f35b610104610125366004610562565b60036020526000908152604090205481565b60005461015c9074010000000000000000000000000000000000000000900460ff1681565b60405160ff909116815260200161010e565b61010460015481565b61017f6102bd565b60405161010e9190610595565b61019461034b565b005b61017f61035f565b6000546040516001600160a01b03909116815260200161010e565b6102006101c7366004610562565b69ffffffffffffffffffff8116600090815260036020908152604080832054600583528184205460049093529220549293919290918490565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a00161010e565b6101946102453660046105e3565b61036c565b6101946102583660046105fc565b61040b565b61010461026b366004610562565b60046020526000908152604090205481565b60008054600160a81b900469ffffffffffffffffffff16808252600360209081526040808420546005835281852054600490935293205491929183610200565b600680546102ca90610625565b80601f01602080910402602001604051908101604052809291908181526020018280546102f690610625565b80156103435780601f1061031857610100808354040283529160200191610343565b820191906000526020600020905b81548152906001019060200180831161032657829003601f168201915b505050505081565b6103536104a0565b61035d60006104fa565b565b600280546102ca90610625565b6103746104a0565b60008054600160a81b900469ffffffffffffffffffff169060156103978361065f565b82546101009290920a69ffffffffffffffffffff81810219909316918316021790915560008054600160a81b90819004831682526003602090815260408084209690965582548290048416835260048152858320429081905583549290920490931682526005909252929092209190915550565b6104136104a0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61049d816104fa565b50565b6000546001600160a01b0316331461035d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048b565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561057457600080fd5b813569ffffffffffffffffffff8116811461058e57600080fd5b9392505050565b600060208083528351808285015260005b818110156105c2578581018301518582016040015282016105a6565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156105f557600080fd5b5035919050565b60006020828403121561060e57600080fd5b81356001600160a01b038116811461058e57600080fd5b600181811c9082168061063957607f821691505b60208210810361065957634e487b7160e01b600052602260045260246000fd5b50919050565b600069ffffffffffffffffffff80831681810361068c57634e487b7160e01b600052601160045260246000fd5b600101939250505056fea2646970667358221220b0877ddd00e593786f601c5eaf8588a2775dfbf892e2ffb06f78116ea256a45464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80637284e4161161008c578063a87a20ce11610066578063a87a20ce14610237578063f2fde38b1461024a578063f35bfacd1461025d578063feaf968c1461027d57600080fd5b80637284e416146101965780638da5cb5b1461019e5780639a6fc8f5146101b957600080fd5b806354fd4d50116100bd57806354fd4d501461016e5780636f307dc314610177578063715018a61461018c57600080fd5b80630387c6a5146100e45780631acce90314610117578063313ce56714610137575b600080fd5b6101046100f2366004610562565b60056020526000908152604090205481565b6040519081526020015b60405180910390f35b610104610125366004610562565b60036020526000908152604090205481565b60005461015c9074010000000000000000000000000000000000000000900460ff1681565b60405160ff909116815260200161010e565b61010460015481565b61017f6102bd565b60405161010e9190610595565b61019461034b565b005b61017f61035f565b6000546040516001600160a01b03909116815260200161010e565b6102006101c7366004610562565b69ffffffffffffffffffff8116600090815260036020908152604080832054600583528184205460049093529220549293919290918490565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a00161010e565b6101946102453660046105e3565b61036c565b6101946102583660046105fc565b61040b565b61010461026b366004610562565b60046020526000908152604090205481565b60008054600160a81b900469ffffffffffffffffffff16808252600360209081526040808420546005835281852054600490935293205491929183610200565b600680546102ca90610625565b80601f01602080910402602001604051908101604052809291908181526020018280546102f690610625565b80156103435780601f1061031857610100808354040283529160200191610343565b820191906000526020600020905b81548152906001019060200180831161032657829003601f168201915b505050505081565b6103536104a0565b61035d60006104fa565b565b600280546102ca90610625565b6103746104a0565b60008054600160a81b900469ffffffffffffffffffff169060156103978361065f565b82546101009290920a69ffffffffffffffffffff81810219909316918316021790915560008054600160a81b90819004831682526003602090815260408084209690965582548290048416835260048152858320429081905583549290920490931682526005909252929092209190915550565b6104136104a0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61049d816104fa565b50565b6000546001600160a01b0316331461035d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048b565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561057457600080fd5b813569ffffffffffffffffffff8116811461058e57600080fd5b9392505050565b600060208083528351808285015260005b818110156105c2578581018301518582016040015282016105a6565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156105f557600080fd5b5035919050565b60006020828403121561060e57600080fd5b81356001600160a01b038116811461058e57600080fd5b600181811c9082168061063957607f821691505b60208210810361065957634e487b7160e01b600052602260045260246000fd5b50919050565b600069ffffffffffffffffffff80831681810361068c57634e487b7160e01b600052601160045260246000fd5b600101939250505056fea2646970667358221220b0877ddd00e593786f601c5eaf8588a2775dfbf892e2ffb06f78116ea256a45464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/oracles/BTCPriceOracle.sol:BTCPriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7591,
        "contract": "contracts/oracles/BTCPriceOracle.sol:BTCPriceOracle",
        "label": "decimals",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 7593,
        "contract": "contracts/oracles/BTCPriceOracle.sol:BTCPriceOracle",
        "label": "latestRound",
        "offset": 21,
        "slot": "0",
        "type": "t_uint80"
      },
      {
        "astId": 7595,
        "contract": "contracts/oracles/BTCPriceOracle.sol:BTCPriceOracle",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7597,
        "contract": "contracts/oracles/BTCPriceOracle.sol:BTCPriceOracle",
        "label": "description",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7601,
        "contract": "contracts/oracles/BTCPriceOracle.sol:BTCPriceOracle",
        "label": "getAnswer",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint80,t_int256)"
      },
      {
        "astId": 7605,
        "contract": "contracts/oracles/BTCPriceOracle.sol:BTCPriceOracle",
        "label": "getTimestamp",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint80,t_uint256)"
      },
      {
        "astId": 7609,
        "contract": "contracts/oracles/BTCPriceOracle.sol:BTCPriceOracle",
        "label": "getStartedAt",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint80,t_uint256)"
      },
      {
        "astId": 7559,
        "contract": "contracts/oracles/BTCPriceOracle.sol:BTCPriceOracle",
        "label": "underlying",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint80,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint80",
        "label": "mapping(uint80 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint80,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint80",
        "label": "mapping(uint80 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}