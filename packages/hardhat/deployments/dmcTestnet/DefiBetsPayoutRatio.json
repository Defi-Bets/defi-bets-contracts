{
  "address": "0x89CD9aec31F1C06773cFCb91f58cC7DA9b976352",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_managerContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetPayoutRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimeStamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DefiBetsPayoutRatio__AccessForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBetsPayoutRatio__NoValidExpTime",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currProfit",
          "type": "uint256"
        }
      ],
      "name": "UpdateProfitLP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currProfit",
          "type": "uint256"
        }
      ],
      "name": "UpdateProfitPlayer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currProfitsPeriodLP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currProfitsPeriodPlayer",
          "type": "uint256"
        }
      ],
      "name": "UpdateProfitsPeriod",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "adjustmentFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "calulateAdjustedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currProfitsPeriodLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currProfitsPeriodPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_factor",
          "type": "uint256"
        }
      ],
      "name": "setAdjustmentFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_delta",
          "type": "uint256"
        }
      ],
      "name": "setDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetPayoutRatio",
          "type": "uint256"
        }
      ],
      "name": "setTargetPayoutRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetPayoutRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalProfitLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalProfitPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        }
      ],
      "name": "updateLPProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currentPayoutFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updatePlayerProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e4f5fcd3273ed30ef55a68c09200ba9b6a7e8f487143cb7650f3c9328a0239b",
  "receipt": {
    "to": null,
    "from": "0x36375828fd821935cFf3E8AB6322cAb54BBfaDeC",
    "contractAddress": "0x89CD9aec31F1C06773cFCb91f58cC7DA9b976352",
    "transactionIndex": 0,
    "gasUsed": "812258",
    "logsBloom": "0x
    "blockHash": "0x027c8a94509b80662f755aa0e43e6e3a232991c64fb3fc8486854a7306c435e3",
    "transactionHash": "0x1e4f5fcd3273ed30ef55a68c09200ba9b6a7e8f487143cb7650f3c9328a0239b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5180,
        "transactionHash": "0x1e4f5fcd3273ed30ef55a68c09200ba9b6a7e8f487143cb7650f3c9328a0239b",
        "address": "0x89CD9aec31F1C06773cFCb91f58cC7DA9b976352",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000036375828fd821935cff3e8ab6322cab54bbfadec"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x027c8a94509b80662f755aa0e43e6e3a232991c64fb3fc8486854a7306c435e3"
      }
    ],
    "blockNumber": 5180,
    "cumulativeGasUsed": "812258",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x235234291698c6971e29a5D866dC95F7a66e5f8c",
    30,
    90,
    1691013600
  ],
  "numDeployments": 1,
  "solcInputHash": "15ef30c145d63ccfa88025740e8b741e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetPayoutRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimeStamp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DefiBetsPayoutRatio__AccessForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBetsPayoutRatio__NoValidExpTime\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currProfit\",\"type\":\"uint256\"}],\"name\":\"UpdateProfitLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currProfit\",\"type\":\"uint256\"}],\"name\":\"UpdateProfitPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currProfitsPeriodLP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currProfitsPeriodPlayer\",\"type\":\"uint256\"}],\"name\":\"UpdateProfitsPeriod\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adjustmentFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"calulateAdjustedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currProfitsPeriodLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currProfitsPeriodPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_factor\",\"type\":\"uint256\"}],\"name\":\"setAdjustmentFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"}],\"name\":\"setDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetPayoutRatio\",\"type\":\"uint256\"}],\"name\":\"setTargetPayoutRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetPayoutRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalProfitLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalProfitPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"}],\"name\":\"updateLPProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentPayoutFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updatePlayerProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/DefiBetsPayoutRatio.sol\":\"DefiBetsPayoutRatio\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/core/DefiBetsPayoutRatio.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interface/core/IDefiBetsPayoutRatio.sol\\\";\\r\\nimport \\\"../interface/core/IDefiBetsManager.sol\\\";\\r\\n\\r\\nerror DefiBetsPayoutRatio__AccessForbidden();\\r\\nerror DefiBetsPayoutRatio__NoValidExpTime();\\r\\n\\r\\ncontract DefiBetsPayoutRatio is IDefiBetsPayoutRatio, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /* ====== State Variables ====== */\\r\\n\\r\\n    uint256 public startTimestamp;\\r\\n    uint256 public delta = 86400;\\r\\n\\r\\n    mapping(uint256 => uint256) public totalProfitLP; /* total wins of the lp per day */\\r\\n    mapping(uint256 => uint256) public totalProfitPlayer; /* total wins of the player per day */\\r\\n\\r\\n    address managerContract;\\r\\n\\r\\n    uint256 public currProfitsPeriodLP;\\r\\n    uint256 public currProfitsPeriodPlayer;\\r\\n\\r\\n    //Index for efficient searching the results over the period\\r\\n    uint256 private startIndex;\\r\\n    uint256 private endIndex;\\r\\n\\r\\n    uint256 public period;\\r\\n\\r\\n    uint256 public targetPayoutRatio; /* set target ratio you want. (e.g. 90 = 90% payout ratio) */\\r\\n\\r\\n    uint256 public adjustmentFactor = 5;\\r\\n\\r\\n    /* ====== Events ====== */\\r\\n    event UpdateProfitLP(uint256 currProfit);\\r\\n    event UpdateProfitPlayer(uint256 currProfit);\\r\\n    event UpdateProfitsPeriod(\\r\\n        uint256 startIndex,\\r\\n        uint256 endIndex,\\r\\n        uint256 currProfitsPeriodLP,\\r\\n        uint256 currProfitsPeriodPlayer\\r\\n    );\\r\\n\\r\\n    constructor(address _managerContract, uint256 _period, uint256 _targetPayoutRatio, uint256 _startTimeStamp) {\\r\\n        managerContract = _managerContract;\\r\\n        period = _period;\\r\\n        targetPayoutRatio = _targetPayoutRatio;\\r\\n        startTimestamp = _startTimeStamp;\\r\\n        startIndex = startTimestamp;\\r\\n        endIndex = startTimestamp;\\r\\n    }\\r\\n\\r\\n    /* ====== Mutation Functions ====== */\\r\\n\\r\\n    function setTargetPayoutRatio(uint256 _targetPayoutRatio) external onlyOwner {\\r\\n        targetPayoutRatio = _targetPayoutRatio;\\r\\n    }\\r\\n\\r\\n    function setAdjustmentFactor(uint256 _factor) external onlyOwner {\\r\\n        adjustmentFactor = _factor;\\r\\n    }\\r\\n\\r\\n    function setDelta(uint256 _delta) external onlyOwner {\\r\\n        delta = _delta;\\r\\n    }\\r\\n\\r\\n    function updateLPProfit(uint256 _amount, uint256 _expTime) external {\\r\\n        _isManagerContract();\\r\\n        _isValidExpTime(_expTime);\\r\\n\\r\\n        // loop through all modulo days\\r\\n        uint256 _adjTimestamp = calulateAdjustedTimestamp(_expTime);\\r\\n        uint256 _profit = totalProfitLP[_adjTimestamp];\\r\\n\\r\\n        totalProfitLP[_adjTimestamp] = _profit.add(_amount);\\r\\n\\r\\n        emit UpdateProfitLP(totalProfitLP[_adjTimestamp]);\\r\\n    }\\r\\n\\r\\n    function updatePlayerProfit(uint256 _currentPayoutFactor, uint256 _amount) external {\\r\\n        _isManagerContract();\\r\\n\\r\\n        uint256 _adjTimestamp = calulateAdjustedTimestamp(block.timestamp);\\r\\n\\r\\n        totalProfitPlayer[_adjTimestamp] += _amount;\\r\\n\\r\\n        _updatePeriodProfits(_adjTimestamp);\\r\\n\\r\\n        // // calculate new payoutFactor\\r\\n        uint256 newPayoutFactor = _getNewPayoutFactor(_currentPayoutFactor);\\r\\n\\r\\n        // set new Payout Factor\\r\\n\\r\\n        IDefiBetsManager(managerContract).setNewPayoutFactor(newPayoutFactor > 100 ? 100 : newPayoutFactor);\\r\\n    }\\r\\n\\r\\n    /* ====== Internal Functions ====== */\\r\\n\\r\\n    function _getNewPayoutFactor(uint256 _currentPayoutFactor) internal view returns (uint256) {\\r\\n        uint256 _newPayoutRatio = currProfitsPeriodLP == 0 ? 0 : (currProfitsPeriodPlayer * 100) / currProfitsPeriodLP; // currentRatio = Gplayer / Glp\\r\\n\\r\\n        if (_newPayoutRatio > targetPayoutRatio) {\\r\\n            // too much for player, decrease payout factor\\r\\n            return\\r\\n                _currentPayoutFactor -\\r\\n                (_newPayoutRatio - targetPayoutRatio) /\\r\\n                adjustmentFactor; /* slow decreasing of player winnings */\\r\\n        } else if (_newPayoutRatio < targetPayoutRatio) {\\r\\n            // too much for LP, increase payout factor\\r\\n            return\\r\\n                _currentPayoutFactor +\\r\\n                (targetPayoutRatio - _newPayoutRatio) /\\r\\n                adjustmentFactor; /* slow increasing of player winnings */\\r\\n        }\\r\\n        // targetPayoutRatio == currPayoutRatio\\r\\n\\r\\n        // perfect ratio and factor, do nothing\\r\\n\\r\\n        return _currentPayoutFactor;\\r\\n    }\\r\\n\\r\\n    function _isManagerContract() internal view {\\r\\n        if (msg.sender != managerContract) {\\r\\n            revert DefiBetsPayoutRatio__AccessForbidden();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calculateIndexSteps(uint256 _currIndex, uint256 _newIndex) internal view returns (uint256) {\\r\\n        uint256 _indexSteps = _newIndex > _currIndex ? (_newIndex.sub(_currIndex)).div(delta) : 0;\\r\\n\\r\\n        return _indexSteps;\\r\\n    }\\r\\n\\r\\n    function _isValidExpTime(uint256 _expTime) internal view {\\r\\n        if (_expTime < block.timestamp) {\\r\\n            revert DefiBetsPayoutRatio__NoValidExpTime();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updatePeriodProfits(uint256 _adjTimestamp) internal {\\r\\n        uint256 _newStartIndex = (_adjTimestamp.sub(period.mul(delta)));\\r\\n\\r\\n        uint256 _indexSteps = _calculateIndexSteps(endIndex, _adjTimestamp);\\r\\n\\r\\n        for (uint256 i = 1; i <= _indexSteps; i++) {\\r\\n            uint256 _index = endIndex.add(i.mul(delta));\\r\\n\\r\\n            currProfitsPeriodLP += totalProfitLP[_index];\\r\\n            currProfitsPeriodPlayer += totalProfitPlayer[_index];\\r\\n        }\\r\\n\\r\\n        _indexSteps = _calculateIndexSteps(startIndex, _newStartIndex);\\r\\n\\r\\n        for (uint256 i = 0; i < _indexSteps; i++) {\\r\\n            uint256 _index = startIndex.add(i.mul(delta));\\r\\n\\r\\n            currProfitsPeriodLP -= totalProfitLP[_index];\\r\\n            currProfitsPeriodPlayer -= totalProfitPlayer[_index];\\r\\n        }\\r\\n\\r\\n        startIndex = _newStartIndex > startIndex ? _newStartIndex : startIndex;\\r\\n        endIndex = _adjTimestamp > endIndex ? _adjTimestamp : endIndex;\\r\\n\\r\\n        emit UpdateProfitsPeriod(startIndex, endIndex, currProfitsPeriodLP, currProfitsPeriodPlayer);\\r\\n    }\\r\\n\\r\\n    function calulateAdjustedTimestamp(uint256 _timestamp) public view returns (uint256) {\\r\\n        uint256 _adjTimestamp = (((_timestamp.sub(startTimestamp)).div(delta)).mul(delta)).add(startTimestamp);\\r\\n\\r\\n        return _adjTimestamp;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9741dc907de0bf3e797112be24c7d95149113ca17776ff3a08fa6ea8cc64960b\",\"license\":\"MIT\"},\"contracts/interface/core/IDefiBetsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IDefiBetsManager {\\r\\n    function getLPTokenSupplies() external view returns(uint256,uint256);\\r\\n    function setNewPayoutFactor(uint256 _payoutFactor) external;\\r\\n}\",\"keccak256\":\"0x1215c892c39fc7dccdd6b6974ccfe7fef56e64e1d3ec118ca1681b12bcd78afc\",\"license\":\"MIT\"},\"contracts/interface/core/IDefiBetsPayoutRatio.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IDefiBetsPayoutRatio {\\r\\n    function updateLPProfit(uint256 _amount, uint256 _expTime) external;\\r\\n\\r\\n    function updatePlayerProfit(uint256 _currentPayoutFactor, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x24021e47e0f6d986122545bd6239a28993e92ef20c4854e7e3ab48bd74abe94d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052620151806002556005600c5534801561001c57600080fd5b50604051610b2d380380610b2d83398101604081905261003b916100d0565b61004433610080565b600580546001600160a01b0319166001600160a01b039590951694909417909355600a91909155600b556001819055600881905560095561011b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080608085870312156100e657600080fd5b84516001600160a01b03811681146100fd57600080fd5b60208601516040870151606090970151919890975090945092505050565b610a038061012a6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80637aae71e4116100b2578063dc2db84d11610081578063ef78d4fd11610066578063ef78d4fd14610248578063f2fde38b14610251578063f502d8c01461026457600080fd5b8063dc2db84d1461022c578063e6fd48bc1461023f57600080fd5b80637aae71e4146101ec5780638da5cb5b146101f557806394252bf814610210578063cb6741ed1461022357600080fd5b8063234f5be51161010957806369e90359116100ee57806369e90359146101bb578063715018a6146101db5780637509e58c146101e357600080fd5b8063234f5be51461018857806367e79c441461019b57600080fd5b8063025ff0a51461013b57806312b495a8146101505780631bb8c4441461016c5780631d18c7ba14610175575b600080fd5b61014e6101493660046108db565b610277565b005b61015960025481565b6040519081526020015b60405180910390f35b61015960075481565b61014e6101833660046108f4565b610284565b61014e6101963660046108f4565b610351565b6101596101a93660046108db565b60046020526000908152604090205481565b6101596101c93660046108db565b60036020526000908152604090205481565b61014e6103da565b610159600b5481565b61015960065481565b6000546040516001600160a01b039091168152602001610163565b61014e61021e3660046108db565b6103ee565b610159600c5481565b61014e61023a3660046108db565b6103fb565b61015960015481565b610159600a5481565b61014e61025f366004610916565b610408565b6101596102723660046108db565b61049d565b61027f6104e0565b600255565b61028c61053a565b60006102974261049d565b9050816004600083815260200190815260200160002060008282546102bc9190610955565b909155506102cb905081610565565b60006102d684610759565b6005549091506001600160a01b031663dd39dd64606483116102f857826102fb565b60645b6040518263ffffffff1660e01b815260040161031991815260200190565b600060405180830381600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b5050505050505050565b61035961053a565b610362816107ef565b600061036d8261049d565b6000818152600360205260409020549091506103898185610810565b60008381526003602052604090819020829055517f2474663d6ed22eb32ac7ea5317229568788bca22fe6d2d8d676cf0c6edf98f6c916103cc9190815260200190565b60405180910390a150505050565b6103e26104e0565b6103ec6000610825565b565b6103f66104e0565b600b55565b6104036104e0565b600c55565b6104106104e0565b6001600160a01b0381166104915760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61049a81610825565b50565b6000806104d96001546104d36002546104cd6002546104c76001548a61088d90919063ffffffff16565b90610899565b906108a5565b90610810565b9392505050565b6000546001600160a01b031633146103ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610488565b6005546001600160a01b031633146103ec57604051631f20b94f60e31b815260040160405180910390fd5b6000610588610581600254600a546108a590919063ffffffff16565b839061088d565b90506000610598600954846108b1565b905060015b81811161062f5760006105c76105be600254846108a590919063ffffffff16565b60095490610810565b90506003600082815260200190815260200160002054600660008282546105ee9190610955565b90915550506000818152600460205260408120546007805491929091610615908490610955565b90915550829150610627905081610968565b91505061059d565b5061063c600854836108b1565b905060005b818110156106d457600061066c610663600254846108a590919063ffffffff16565b60085490610810565b90506003600082815260200190815260200160002054600660008282546106939190610981565b909155505060008181526004602052604081205460078054919290916106ba908490610981565b909155508291506106cc905081610968565b915050610641565b5060085482116106e6576008546106e8565b815b60085560095483116106fc576009546106fe565b825b60098190556008546006546007546040805193845260208401949094529282015260608101919091527f30a6bf43bdcb402bcd3d83aa60ae4b6aaff2299cb00a779824cdcf50d543d08e9060800160405180910390a1505050565b60008060065460001461078657600654600754610777906064610994565b61078191906109ab565b610789565b60005b9050600b548111156107b957600c54600b546107a59083610981565b6107af91906109ab565b6104d99084610981565b600b548110156107e857600c5481600b546107d49190610981565b6107de91906109ab565b6104d99084610955565b5090919050565b4281101561049a57604051633e985f4760e01b815260040160405180910390fd5b600061081c8284610955565b90505b92915050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061081c8284610981565b600061081c82846109ab565b600061081c8284610994565b6000808383116108c25760006108d3565b6002546108d3906104c7858761088d565b949350505050565b6000602082840312156108ed57600080fd5b5035919050565b6000806040838503121561090757600080fd5b50508035926020909101359150565b60006020828403121561092857600080fd5b81356001600160a01b03811681146104d957600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561081f5761081f61093f565b60006001820161097a5761097a61093f565b5060010190565b8181038181111561081f5761081f61093f565b808202811582820484141761081f5761081f61093f565b6000826109c857634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a1bbfc13f2c70b6ab9d05c0bc38505d00e7e49b10a7df380b4d2d4d3ad7ea79664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80637aae71e4116100b2578063dc2db84d11610081578063ef78d4fd11610066578063ef78d4fd14610248578063f2fde38b14610251578063f502d8c01461026457600080fd5b8063dc2db84d1461022c578063e6fd48bc1461023f57600080fd5b80637aae71e4146101ec5780638da5cb5b146101f557806394252bf814610210578063cb6741ed1461022357600080fd5b8063234f5be51161010957806369e90359116100ee57806369e90359146101bb578063715018a6146101db5780637509e58c146101e357600080fd5b8063234f5be51461018857806367e79c441461019b57600080fd5b8063025ff0a51461013b57806312b495a8146101505780631bb8c4441461016c5780631d18c7ba14610175575b600080fd5b61014e6101493660046108db565b610277565b005b61015960025481565b6040519081526020015b60405180910390f35b61015960075481565b61014e6101833660046108f4565b610284565b61014e6101963660046108f4565b610351565b6101596101a93660046108db565b60046020526000908152604090205481565b6101596101c93660046108db565b60036020526000908152604090205481565b61014e6103da565b610159600b5481565b61015960065481565b6000546040516001600160a01b039091168152602001610163565b61014e61021e3660046108db565b6103ee565b610159600c5481565b61014e61023a3660046108db565b6103fb565b61015960015481565b610159600a5481565b61014e61025f366004610916565b610408565b6101596102723660046108db565b61049d565b61027f6104e0565b600255565b61028c61053a565b60006102974261049d565b9050816004600083815260200190815260200160002060008282546102bc9190610955565b909155506102cb905081610565565b60006102d684610759565b6005549091506001600160a01b031663dd39dd64606483116102f857826102fb565b60645b6040518263ffffffff1660e01b815260040161031991815260200190565b600060405180830381600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b5050505050505050565b61035961053a565b610362816107ef565b600061036d8261049d565b6000818152600360205260409020549091506103898185610810565b60008381526003602052604090819020829055517f2474663d6ed22eb32ac7ea5317229568788bca22fe6d2d8d676cf0c6edf98f6c916103cc9190815260200190565b60405180910390a150505050565b6103e26104e0565b6103ec6000610825565b565b6103f66104e0565b600b55565b6104036104e0565b600c55565b6104106104e0565b6001600160a01b0381166104915760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61049a81610825565b50565b6000806104d96001546104d36002546104cd6002546104c76001548a61088d90919063ffffffff16565b90610899565b906108a5565b90610810565b9392505050565b6000546001600160a01b031633146103ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610488565b6005546001600160a01b031633146103ec57604051631f20b94f60e31b815260040160405180910390fd5b6000610588610581600254600a546108a590919063ffffffff16565b839061088d565b90506000610598600954846108b1565b905060015b81811161062f5760006105c76105be600254846108a590919063ffffffff16565b60095490610810565b90506003600082815260200190815260200160002054600660008282546105ee9190610955565b90915550506000818152600460205260408120546007805491929091610615908490610955565b90915550829150610627905081610968565b91505061059d565b5061063c600854836108b1565b905060005b818110156106d457600061066c610663600254846108a590919063ffffffff16565b60085490610810565b90506003600082815260200190815260200160002054600660008282546106939190610981565b909155505060008181526004602052604081205460078054919290916106ba908490610981565b909155508291506106cc905081610968565b915050610641565b5060085482116106e6576008546106e8565b815b60085560095483116106fc576009546106fe565b825b60098190556008546006546007546040805193845260208401949094529282015260608101919091527f30a6bf43bdcb402bcd3d83aa60ae4b6aaff2299cb00a779824cdcf50d543d08e9060800160405180910390a1505050565b60008060065460001461078657600654600754610777906064610994565b61078191906109ab565b610789565b60005b9050600b548111156107b957600c54600b546107a59083610981565b6107af91906109ab565b6104d99084610981565b600b548110156107e857600c5481600b546107d49190610981565b6107de91906109ab565b6104d99084610955565b5090919050565b4281101561049a57604051633e985f4760e01b815260040160405180910390fd5b600061081c8284610955565b90505b92915050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061081c8284610981565b600061081c82846109ab565b600061081c8284610994565b6000808383116108c25760006108d3565b6002546108d3906104c7858761088d565b949350505050565b6000602082840312156108ed57600080fd5b5035919050565b6000806040838503121561090757600080fd5b50508035926020909101359150565b60006020828403121561092857600080fd5b81356001600160a01b03811681146104d957600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561081f5761081f61093f565b60006001820161097a5761097a61093f565b5060010190565b8181038181111561081f5761081f61093f565b808202811582820484141761081f5761081f61093f565b6000826109c857634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a1bbfc13f2c70b6ab9d05c0bc38505d00e7e49b10a7df380b4d2d4d3ad7ea79664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/core/DefiBetsPayoutRatio.sol:DefiBetsPayoutRatio",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 465,
        "contract": "contracts/core/DefiBetsPayoutRatio.sol:DefiBetsPayoutRatio",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 468,
        "contract": "contracts/core/DefiBetsPayoutRatio.sol:DefiBetsPayoutRatio",
        "label": "delta",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 472,
        "contract": "contracts/core/DefiBetsPayoutRatio.sol:DefiBetsPayoutRatio",
        "label": "totalProfitLP",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 476,
        "contract": "contracts/core/DefiBetsPayoutRatio.sol:DefiBetsPayoutRatio",
        "label": "totalProfitPlayer",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 478,
        "contract": "contracts/core/DefiBetsPayoutRatio.sol:DefiBetsPayoutRatio",
        "label": "managerContract",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 480,
        "contract": "contracts/core/DefiBetsPayoutRatio.sol:DefiBetsPayoutRatio",
        "label": "currProfitsPeriodLP",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 482,
        "contract": "contracts/core/DefiBetsPayoutRatio.sol:DefiBetsPayoutRatio",
        "label": "currProfitsPeriodPlayer",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 484,
        "contract": "contracts/core/DefiBetsPayoutRatio.sol:DefiBetsPayoutRatio",
        "label": "startIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 486,
        "contract": "contracts/core/DefiBetsPayoutRatio.sol:DefiBetsPayoutRatio",
        "label": "endIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 488,
        "contract": "contracts/core/DefiBetsPayoutRatio.sol:DefiBetsPayoutRatio",
        "label": "period",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 490,
        "contract": "contracts/core/DefiBetsPayoutRatio.sol:DefiBetsPayoutRatio",
        "label": "targetPayoutRatio",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 493,
        "contract": "contracts/core/DefiBetsPayoutRatio.sol:DefiBetsPayoutRatio",
        "label": "adjustmentFactor",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}