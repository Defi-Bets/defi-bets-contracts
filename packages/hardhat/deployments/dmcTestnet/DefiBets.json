{
  "address": "0x9Bcb695Ea0BBeC9f35417A6B36Bd8C936dafdD20",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_underlying",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_defiBetsManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DefiBets_NoValidParamters",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBets__AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBets__Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBets__NoValidExpTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBets__NoValidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBets__NoValidWinningPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBets__NotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBets__NotEpxired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBets__NotExecutableTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBets__NotTheTokenOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBets__OutOfActiveExpTimeRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBets__ParameterNotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBets__TokenDontExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBetDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBetDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "BetParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPrice",
          "type": "uint256"
        }
      ],
      "name": "BetPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLpLoss",
          "type": "uint256"
        }
      ],
      "name": "EpxirationTimeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "profit",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "Expiration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxUserWinnings",
          "type": "uint256"
        }
      ],
      "name": "ExpiryTimeBetInfoUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betsWinningSlots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxUserWinnings",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalBets",
          "type": "uint256"
        }
      ],
      "name": "calculateMaxLPLoss",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_winning",
          "type": "uint256"
        }
      ],
      "name": "calculateMaxUserWinnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defiBetsManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "expTimeInfos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxUserWinning",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLossLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deltaValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slotSize",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "finished",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "profit",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "init",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getBetTokenData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "expTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "betSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "profit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct DefiBets.Bet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDependentExpTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dependentTimeStamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxLossPerExpTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBetDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBetDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxWinMultiplier",
          "type": "uint256"
        }
      ],
      "name": "initializeData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLpLoss",
          "type": "uint256"
        }
      ],
      "name": "initializeNewExpTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastActiveExpTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBetDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxWinMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBetDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expPrice",
          "type": "uint256"
        }
      ],
      "name": "performExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_betSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_winning",
          "type": "uint256"
        }
      ],
      "name": "setBetForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLossPerExpTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBetDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBetDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxWinMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dependentTimeStamp",
          "type": "uint256"
        }
      ],
      "name": "setBetParamater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeDelta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xde5323966c3d1369ab0ed1e3f05dc108e5b79079ac8b88e231a522ecde52dfcb",
  "receipt": {
    "to": null,
    "from": "0x36375828fd821935cFf3E8AB6322cAb54BBfaDeC",
    "contractAddress": "0x9Bcb695Ea0BBeC9f35417A6B36Bd8C936dafdD20",
    "transactionIndex": 0,
    "gasUsed": "2550226",
    "logsBloom": "0x
    "blockHash": "0x276dd5b096d3dba916fe8dafd2be6ac3d2ae3f259b4c19c709b06ba0432d414e",
    "transactionHash": "0xde5323966c3d1369ab0ed1e3f05dc108e5b79079ac8b88e231a522ecde52dfcb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 34722,
        "transactionHash": "0xde5323966c3d1369ab0ed1e3f05dc108e5b79079ac8b88e231a522ecde52dfcb",
        "address": "0x9Bcb695Ea0BBeC9f35417A6B36Bd8C936dafdD20",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000036375828fd821935cff3e8ab6322cab54bbfadec"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x276dd5b096d3dba916fe8dafd2be6ac3d2ae3f259b4c19c709b06ba0432d414e"
      }
    ],
    "blockNumber": 34722,
    "cumulativeGasUsed": "2550226",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "BTC",
    "0xCED0d1b34D61c03C0eF62C4b6056F77564620Fae"
  ],
  "numDeployments": 1,
  "solcInputHash": "e5ae93e129a91e5c29f8066dfe1f0c71",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_underlying\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_defiBetsManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DefiBets_NoValidParamters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBets__AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBets__Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBets__NoValidExpTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBets__NoValidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBets__NoValidWinningPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBets__NotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBets__NotEpxired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBets__NotExecutableTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBets__NotTheTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBets__OutOfActiveExpTimeRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBets__ParameterNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBets__TokenDontExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBetDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBetDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"BetParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLpLoss\",\"type\":\"uint256\"}],\"name\":\"EpxirationTimeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"profit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"Expiration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxUserWinnings\",\"type\":\"uint256\"}],\"name\":\"ExpiryTimeBetInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betsWinningSlots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxUserWinnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBets\",\"type\":\"uint256\"}],\"name\":\"calculateMaxLPLoss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winning\",\"type\":\"uint256\"}],\"name\":\"calculateMaxUserWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defiBetsManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expTimeInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxUserWinning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLossLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slotSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"profit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getBetTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct DefiBets.Bet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDependentExpTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dependentTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLossPerExpTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBetDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBetDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWinMultiplier\",\"type\":\"uint256\"}],\"name\":\"initializeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLpLoss\",\"type\":\"uint256\"}],\"name\":\"initializeNewExpTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastActiveExpTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBetDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWinMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBetDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expPrice\",\"type\":\"uint256\"}],\"name\":\"performExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_betSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winning\",\"type\":\"uint256\"}],\"name\":\"setBetForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLossPerExpTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBetDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBetDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWinMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dependentTimeStamp\",\"type\":\"uint256\"}],\"name\":\"setBetParamater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"_defiBetsManager\":\"- the manager and owner of the contract. \"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/DefiBets.sol\":\"DefiBets\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/core/DefiBets.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"../interface/core/IDefiBets.sol\\\";\\r\\nimport \\\"../interface/core/IDefiBetsManager.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\nerror DefiBets__Forbidden();\\r\\nerror DefiBets__NoValidExpTime();\\r\\nerror DefiBets__NoValidPrice();\\r\\nerror DefiBets__NoValidWinningPrice();\\r\\nerror DefiBets__OutOfActiveExpTimeRange();\\r\\nerror DefiBets__AlreadyInitialized();\\r\\nerror DefiBets__ParameterNotInitialized();\\r\\nerror DefiBets_NoValidParamters();\\r\\nerror DefiBets__TokenDontExists();\\r\\nerror DefiBets__NotExecutableTime();\\r\\nerror DefiBets__NotTheTokenOwner();\\r\\nerror DefiBets__NotEpxired();\\r\\nerror DefiBets__NotActive();\\r\\n\\r\\ncontract DefiBets is ERC721, Ownable, IDefiBets {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n    \\r\\n\\r\\n\\r\\n    struct ExpTimeInfo {\\r\\n        uint256 maxUserWinning;\\r\\n        uint256 totalBets;\\r\\n        uint256 maxLossLimit;\\r\\n        uint256 expPrice;\\r\\n        uint256 deltaValue;\\r\\n        uint256 slotSize;\\r\\n        bool finished;\\r\\n        bool profit;\\r\\n        bool init;\\r\\n    }\\r\\n\\r\\n    struct Bet {\\r\\n        uint256 expTime;\\r\\n        uint256 betSize;\\r\\n        uint256 profit;\\r\\n        uint256 minPrice;\\r\\n        uint256 maxPrice;\\r\\n    }\\r\\n\\r\\n    uint256 private constant MULTIPLIER = 1000000;\\r\\n\\r\\n    /* ====== State Variables ====== */\\r\\n    Counters.Counter private tokenIds;\\r\\n    string public underlying;\\r\\n    bool private initialized;\\r\\n    uint256 public minBetDuration;\\r\\n    uint256 public maxBetDuration;\\r\\n    uint256 public slot;                /* Steps of valid bet prices */\\r\\n    uint256 public maxWinMultiplier;    /* How much should a winner be able to multiply his bet amount (also important for minimum bet range) */\\r\\n    uint256 public timeDelta;\\r\\n\\r\\n    bool public isActive;\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n    //All mappings can be searched with the expiration date.\\r\\n    uint256 private  dependentTimeStamp;\\r\\n    uint256 public lastActiveExpTime;\\r\\n    mapping(uint256 => bool) private validExpTime;\\r\\n    mapping(uint256 => ExpTimeInfo) public expTimeInfos;\\r\\n    mapping(uint256 => Bet) private bets;\\r\\n\\r\\n    mapping(uint => mapping(uint256 => uint256)) public betsWinningSlots;\\r\\n\\r\\n    address public defiBetsManager;\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n    /* ====== Events ====== */\\r\\n    event EpxirationTimeCreated(uint256 expTime,uint256 maxLpLoss);\\r\\n    event ExpiryTimeBetInfoUpdated(uint256 expirationDate,uint256 totalBets,uint256 maxUserWinnings);\\r\\n    event BetPlaced(address indexed account,uint256 betSize,uint256 profit,uint256 expDate,uint256 minPrice,uint256 maxPrice);\\r\\n    event Expiration(uint256 expTime,bool profit, uint256 delta);\\r\\n    event BetParameterUpdated(uint256 minBetDuration,uint256 maxBetDuration,uint256 slot);\\r\\n\\r\\n    /**\\r\\n     * @param _defiBetsManager - the manager and owner of the contract. \\r\\n     */\\r\\n    constructor(string memory _underlying,address _defiBetsManager) ERC721(\\\"DefiBetsToken\\\",\\\"DB\\\"){\\r\\n        underlying = _underlying;\\r\\n        \\r\\n        defiBetsManager = _defiBetsManager;\\r\\n\\r\\n        isActive = true;\\r\\n\\r\\n        timeDelta = 60*60*24;\\r\\n    }\\r\\n\\r\\n    /* ====== Mutation Functions ====== */\\r\\n    function setBetForAccount(address _account,uint256 _betSize,uint256 _minPrice,uint256 _maxPrice,uint256 _expTime,uint256 _winning) external returns(uint256,bool) {\\r\\n        _isDefiBetManager();\\r\\n        _isInitialized();\\r\\n\\r\\n        // validate input paramaters\\r\\n        _validExpirationTime(_expTime);\\r\\n        _isValidActiveTimeRange(_expTime);\\r\\n        _validPriceRange(_minPrice, _maxPrice);\\r\\n\\r\\n        uint256 _maxLPLossBefore = calculateMaxLPLoss(expTimeInfos[_expTime].maxUserWinning,expTimeInfos[_expTime].totalBets);\\r\\n\\r\\n        uint256 _maxUserWinnings = calculateMaxUserWinnings(_expTime,_minPrice,_maxPrice,_winning);\\r\\n        \\r\\n        uint256 _maxLPLoss = calculateMaxLPLoss(_maxUserWinnings,expTimeInfos[_expTime].totalBets.add(_betSize));\\r\\n \\r\\n\\r\\n        bool _valid = _isMaxLossValid(_maxLPLossBefore,_maxLPLoss,expTimeInfos[_expTime].maxLossLimit);\\r\\n         if(_valid == false){\\r\\n            revert DefiBets__NoValidWinningPrice();\\r\\n        }\\r\\n\\r\\n\\r\\n        _updateBetInfo(_expTime,_maxUserWinnings,_betSize);\\r\\n\\r\\n        _createBetData(_account,_expTime,_betSize,_winning,_minPrice,_maxPrice);\\r\\n\\r\\n        //Attention: This function has high gas costs!!!!\\r\\n        _distributeWinningsToSlots( _minPrice, _maxPrice, _winning, _expTime);\\r\\n        \\r\\n        emit BetPlaced(_account,_betSize,_winning,_expTime,_minPrice,_maxPrice);\\r\\n\\r\\n        return _maxLPLossBefore > _maxLPLoss ? (_maxLPLoss.sub(_maxLPLossBefore),false) : (_maxLPLoss.sub(_maxLPLossBefore),true);\\r\\n\\r\\n    }\\r\\n\\r\\n    function claimForAccount(address _account,uint256 _tokenId) external returns(uint256,uint256,bool) {\\r\\n        _isDefiBetManager();\\r\\n\\r\\n        Bet memory _betTokenInfo = getBetTokenData(_tokenId);\\r\\n        ExpTimeInfo memory _expInfo = expTimeInfos[_betTokenInfo.expTime];\\r\\n\\r\\n        if(_expInfo.finished != true){\\r\\n            revert DefiBets__NotEpxired();\\r\\n        }\\r\\n\\r\\n        if(ownerOf(_tokenId) != _account){\\r\\n            revert DefiBets__NotTheTokenOwner();\\r\\n        }\\r\\n\\r\\n\\r\\n        uint256 _tokensForClaim;\\r\\n        bool _profits;\\r\\n\\r\\n        if(_expInfo.expPrice >= _betTokenInfo.minPrice && _expInfo.expPrice < _betTokenInfo.maxPrice){\\r\\n            _tokensForClaim = _betTokenInfo.profit;\\r\\n\\r\\n            _profits = true;\\r\\n        }\\r\\n        \\r\\n        _burn(_tokenId);\\r\\n\\r\\n        return (_tokensForClaim,_betTokenInfo.expTime,_profits);\\r\\n    }\\r\\n\\r\\n    function performExpiration(uint256 _expTime,uint256 _expPrice) external returns(uint256,bool, uint256) {\\r\\n        _isDefiBetManager();\\r\\n        _isInitialized();\\r\\n\\r\\n        _validExpirationTime(_expTime);\\r\\n\\r\\n        if(_expTime > block.timestamp) {\\r\\n            revert DefiBets__NotExecutableTime();\\r\\n        }\\r\\n\\r\\n        (uint256 _delta,bool _profit, uint256 _playerWinnings) = _evaluateProfits(_expTime,_expPrice);\\r\\n\\r\\n        //update the data \\r\\n        expTimeInfos[_expTime].deltaValue = _delta;\\r\\n        expTimeInfos[_expTime].profit = _profit;\\r\\n\\r\\n        expTimeInfos[_expTime].finished = true;\\r\\n        expTimeInfos[_expTime].expPrice = _expPrice;\\r\\n\\r\\n        emit Expiration(_expTime,_profit,_delta);\\r\\n\\r\\n        return (_delta, _profit, _playerWinnings);\\r\\n    }\\r\\n\\r\\n    function initializeNewExpTime(uint256 _maxLpLoss) external {\\r\\n        _isDefiBetManager();\\r\\n        \\r\\n        _isActive();\\r\\n\\r\\n        _isNextExpTimeValid();\\r\\n\\r\\n        uint256 _expTime = dependentTimeStamp > lastActiveExpTime ? dependentTimeStamp.add(timeDelta) : lastActiveExpTime.add(timeDelta) ;\\r\\n\\r\\n        if(expTimeInfos[_expTime].init == false){\\r\\n        _initExpTime(_expTime,_maxLpLoss);\\r\\n        \\r\\n        lastActiveExpTime = _expTime;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ====== Setup Function ====== */\\r\\n    \\r\\n    \\r\\n    function initializeData(uint256 _dependentTimeStamp, uint256 _maxLossPerExpTime, uint256 _minBetDuration, uint256 _maxBetDuration, uint256 _slot, uint256 _maxWinMultiplier) external   {\\r\\n        _isDefiBetManager();\\r\\n\\r\\n        if(initialized){\\r\\n            revert DefiBets__AlreadyInitialized();\\r\\n        }\\r\\n        \\r\\n        setBetParamater(_maxLossPerExpTime,_minBetDuration,_maxBetDuration,_slot, _maxWinMultiplier,60*60*24,_dependentTimeStamp);\\r\\n\\r\\n        initialized = true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function setBetParamater(uint256 _maxLossPerExpTime, uint256 _minBetDuration,uint256 _maxBetDuration,uint256 _slot, uint256 _maxWinMultiplier,uint256 _timeDelta,uint256 _dependentTimeStamp) public  {\\r\\n        _isDefiBetManager();\\r\\n        if(_minBetDuration >= _maxBetDuration){\\r\\n            revert DefiBets_NoValidParamters();\\r\\n        }\\r\\n\\r\\n        minBetDuration = _minBetDuration;\\r\\n        maxBetDuration = _maxBetDuration;\\r\\n        slot = _slot;\\r\\n        maxWinMultiplier = _maxWinMultiplier;\\r\\n        timeDelta = _timeDelta;\\r\\n        dependentTimeStamp = _dependentTimeStamp;\\r\\n        \\r\\n        _initializeMaxWinningsPerExpTime(_maxLossPerExpTime);\\r\\n\\r\\n        emit BetParameterUpdated(minBetDuration,maxBetDuration,slot);\\r\\n    }\\r\\n\\r\\n    function stop() external onlyOwner {\\r\\n        isActive = false;\\r\\n    }\\r\\n\\r\\n    \\r\\n    /* ====== Internal Functions ====== */\\r\\n\\r\\n   \\r\\n\\r\\n    function _createBetData(address _account,uint256 _expTime,uint256 _betSize,uint256 _winning,uint256 _minPrice,uint256 _maxPrice) internal {\\r\\n     \\r\\n\\r\\n        tokenIds.increment();\\r\\n        uint256 newTokenId = tokenIds.current();\\r\\n        _mint(_account, newTokenId);\\r\\n\\r\\n        Bet memory _newBet;\\r\\n\\r\\n        _newBet.betSize = _betSize;\\r\\n        _newBet.minPrice = _minPrice;\\r\\n        _newBet.maxPrice = _maxPrice;\\r\\n        _newBet.profit = _winning;\\r\\n        _newBet.expTime = _expTime;\\r\\n\\r\\n        bets[newTokenId] = _newBet;\\r\\n\\r\\n    }\\r\\n\\r\\n    function _updateBetInfo(uint256 _expTime,uint256 _userWinnings,uint256 _betSize) internal {\\r\\n        uint256 _totalBets = expTimeInfos[_expTime].totalBets;\\r\\n\\r\\n        expTimeInfos[_expTime].maxUserWinning = _userWinnings;\\r\\n        expTimeInfos[_expTime].totalBets = _totalBets.add(_betSize);\\r\\n\\r\\n        emit ExpiryTimeBetInfoUpdated(_expTime,expTimeInfos[_expTime].totalBets,_userWinnings);\\r\\n    }\\r\\n\\r\\n    function _distributeWinningsToSlots(uint256 _minPrice,uint256 _maxPrice,uint256 _winning,uint256 _expTime)internal{\\r\\n        \\r\\n        uint256 _slotAmount = (_maxPrice.sub(_minPrice)).div(slot);\\r\\n\\r\\n        for(uint i = 0;i < _slotAmount;i++){\\r\\n            uint256 _slot = _minPrice.add(i.mul(slot));\\r\\n            \\r\\n            uint256 _slotWinning = betsWinningSlots[_expTime][_slot];\\r\\n\\r\\n            betsWinningSlots[_expTime][_slot] = _slotWinning.add(_winning);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function _isDefiBetManager() internal view {\\r\\n        if(msg.sender != defiBetsManager){\\r\\n            revert DefiBets__Forbidden();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _validExpirationTime(uint256 _expTime) internal view{\\r\\n\\r\\n        if(expTimeInfos[_expTime].init != true){\\r\\n            revert DefiBets__NoValidExpTime();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isValidActiveTimeRange(uint256 _expTime) internal view {\\r\\n        if(_expTime < block.timestamp.add(minBetDuration) || _expTime > block.timestamp.add(maxBetDuration)){\\r\\n            revert DefiBets__OutOfActiveExpTimeRange();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _validPriceRange(uint256 minPrice, uint256 maxPrice) internal view {\\r\\n        if((0 != (minPrice % slot)) ||\\r\\n            (0 != (maxPrice % slot)) ||\\r\\n            (minPrice >= maxPrice))\\r\\n        {\\r\\n            revert DefiBets__NoValidPrice();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isNotIntialized() internal view {\\r\\n        if(initialized){\\r\\n            revert DefiBets__AlreadyInitialized();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isActive() internal view {\\r\\n        if(isActive == false){\\r\\n            revert DefiBets__NotActive();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _initializeMaxWinningsPerExpTime(uint256 _maxLossPerExpTime) internal {\\r\\n        uint256 _timeSteps = (maxBetDuration.sub(minBetDuration)).div(timeDelta);\\r\\n\\r\\n        for(uint i = 0; i< _timeSteps;i++){\\r\\n            uint256 _expTime = dependentTimeStamp.add(timeDelta.mul(i));\\r\\n\\r\\n          _initExpTime(_expTime,_maxLossPerExpTime);\\r\\n        }\\r\\n\\r\\n        lastActiveExpTime = dependentTimeStamp.add(timeDelta.mul(_timeSteps.sub(1)));\\r\\n    }\\r\\n\\r\\n    function _initExpTime(uint256 _expTime,uint256 _maxLoss) internal {\\r\\n            \\r\\n            expTimeInfos[_expTime].maxLossLimit = _maxLoss;\\r\\n            expTimeInfos[_expTime].init = true;\\r\\n            expTimeInfos[_expTime].slotSize = slot;\\r\\n\\r\\n            emit EpxirationTimeCreated(_expTime,_maxLoss);\\r\\n    }\\r\\n\\r\\n    function _isInitialized() internal view {\\r\\n        if(initialized != true){\\r\\n            revert DefiBets__ParameterNotInitialized();\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function _evaluateProfits(uint256 _expTime,uint256 _expPrice) internal view returns(uint256,bool, uint256){\\r\\n        uint256 _delta;\\r\\n        bool _profit;\\r\\n        uint256 _totalBets = expTimeInfos[_expTime].totalBets;\\r\\n        uint256 _winningsExist;\\r\\n\\r\\n        if(_expPrice % slot == 0){\\r\\n  \\r\\n            _winningsExist =  betsWinningSlots[_expTime][_expPrice];\\r\\n \\r\\n        }else{\\r\\n            _winningsExist = betsWinningSlots[_expTime][_expPrice.sub(_expPrice.mod(slot))];\\r\\n        }\\r\\n        \\r\\n\\r\\n        _profit = _totalBets > _winningsExist;\\r\\n\\r\\n        _delta = _profit ? _totalBets.sub(_winningsExist) : _winningsExist.sub(_totalBets);\\r\\n\\r\\n        return (_delta, _profit, _winningsExist);\\r\\n\\r\\n    }\\r\\n\\r\\n    function _isNextExpTimeValid() internal view {\\r\\n        uint256 _nextExpTime = lastActiveExpTime.add(timeDelta);\\r\\n        if(_nextExpTime > block.timestamp.add(maxBetDuration)){\\r\\n            revert DefiBets__OutOfActiveExpTimeRange();\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    function _isMaxLossValid(uint256 _maxLossBefore,uint256 _maxLoss,uint256 _allowedLossPercent) internal view returns(bool){\\r\\n        \\r\\n\\r\\n        (uint256 _totalSupply,uint256 _lockedSupply) = IDefiBetsManager(defiBetsManager).getLPTokenSupplies();\\r\\n\\r\\n        uint256 _allowedLoss = _totalSupply.mul(_allowedLossPercent).div(MULTIPLIER);\\r\\n\\r\\n        if(_maxLoss > _allowedLoss){\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        uint256 _delta = _maxLoss > _maxLossBefore ? _maxLoss.sub(_maxLossBefore) : 0;\\r\\n\\r\\n        if(_delta > _totalSupply.sub(_lockedSupply)){\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n\\r\\n    }\\r\\n\\r\\n    /* ====== Pure/View Functions ====== */\\r\\n\\r\\n    function calculateMaxUserWinnings(uint256 _expTime,uint256 _minPrice, uint256 _maxPrice, uint256 _winning) public view returns(uint256){\\r\\n        uint256 _maxUserWinnings = expTimeInfos[_expTime].maxUserWinning;\\r\\n\\r\\n        uint256 _slotAmount = (_maxPrice.sub(_minPrice)).div(slot);\\r\\n\\r\\n        for(uint i = 0; i<= _slotAmount;i++){\\r\\n            uint256 _price = _minPrice.add(i.mul(slot));\\r\\n            uint256 _winningSlot = betsWinningSlots[_expTime][_price].add(_winning);\\r\\n\\r\\n            if(_maxUserWinnings < _winningSlot){\\r\\n                _maxUserWinnings = _winningSlot;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (_maxUserWinnings);\\r\\n    }\\r\\n\\r\\n\\r\\n    function calculateMaxLPLoss(uint256 _maxUserWinnings,uint256 _totalBets) public pure returns(uint256){\\r\\n        if(_maxUserWinnings > _totalBets){\\r\\n            return _maxUserWinnings.sub(_totalBets);\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getDependentExpTime() public view returns(uint256){\\r\\n        return dependentTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getBetTokenData(uint256 _tokenId) public view returns (Bet memory){\\r\\n        if(_exists(_tokenId) != true){\\r\\n            revert DefiBets__TokenDontExists();\\r\\n        }\\r\\n\\r\\n        return bets[_tokenId];\\r\\n    }\\r\\n    \\r\\n}\",\"keccak256\":\"0x7ce17c787f8306f19851a1bff7dfd3ffe4de368f2a3a455ebf27980a480aaec2\",\"license\":\"MIT\"},\"contracts/interface/core/IDefiBets.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IDefiBets {\\r\\n    struct BetInfo {\\r\\n        uint256 maxUserWinning;\\r\\n        uint256 totalBets;\\r\\n        uint256 maxLPLoss;\\r\\n        bool finished;\\r\\n        uint256 expPrice;\\r\\n    }\\r\\n\\r\\n    struct PlayerBet {\\r\\n        uint256 betSize;\\r\\n        uint256 profit;\\r\\n        uint256 minPrice;\\r\\n        uint256 maxPrice;\\r\\n        bool claimed;\\r\\n    }\\r\\n\\r\\n    function setBetForAccount(address _account,uint256 _betSize,uint256 _minPrice,uint256 _maxPrice,uint256 _expTime,uint256 _winning) external returns(uint256,bool);\\r\\n\\r\\n    function claimForAccount(address _account,uint256 _tokenId) external returns(uint256,uint256,bool);\\r\\n\\r\\n    function setBetParamater(uint256 _maxLossPerDay,uint256 _minBetDuration,uint256 _maxBetDuration,uint256 _slot,uint256 _maxWinMultiplier,uint256 _timeDelta,uint256 _dependentTimeStamp) external;\\r\\n\\r\\n    function performExpiration(uint256 _expTime,uint256 _expPrice) external returns(uint256,bool, uint256) ;\\r\\n\\r\\n    function initializeNewExpTime(uint256 _maxLpLoss) external ;\\r\\n\\r\\n    function lastActiveExpTime() external returns(uint256);\\r\\n\\r\\n    function initializeData(uint256 _startExpTime,uint256 _maxLossPerExpTime,uint256 _minBetDuration,uint256 _maxBetDuration,uint256 _slot, uint256 _maxWinMultiplier) external;\\r\\n\\r\\n}\",\"keccak256\":\"0x3ca05a281581b857012a93690b1b1cf5465d07da7f732cae25c9957167d8846a\",\"license\":\"MIT\"},\"contracts/interface/core/IDefiBetsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IDefiBetsManager {\\r\\n    function getLPTokenSupplies() external view returns(uint256,uint256);\\r\\n    function setNewPayoutFactor(uint256 _payoutFactor) external;\\r\\n}\",\"keccak256\":\"0x1215c892c39fc7dccdd6b6974ccfe7fef56e64e1d3ec118ca1681b12bcd78afc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002de338038062002de3833981016040819052620000349162000185565b6040518060400160405280600d81526020016c2232b334a132ba39aa37b5b2b760991b81525060405180604001604052806002815260200161222160f11b8152508160009081620000869190620002fc565b506001620000958282620002fc565b505050620000b2620000ac620000fc60201b60201c565b62000100565b6008620000c08382620002fc565b50601680546001600160a01b0319166001600160a01b039290921691909117905550600f805460ff1916600117905562015180600e55620003c8565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200018057600080fd5b919050565b600080604083850312156200019957600080fd5b82516001600160401b0380821115620001b157600080fd5b818501915085601f830112620001c657600080fd5b815181811115620001db57620001db62000152565b604051601f8201601f19908116603f0116810190838211818310171562000206576200020662000152565b816040528281526020935088848487010111156200022357600080fd5b600091505b8282101562000247578482018401518183018501529083019062000228565b60008484830101528096505050506200026281860162000168565b925050509250929050565b600181811c908216806200028257607f821691505b602082108103620002a357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002f757600081815260208120601f850160051c81016020861015620002d25750805b601f850160051c820191505b81811015620002f357828155600101620002de565b5050505b505050565b81516001600160401b0381111562000318576200031862000152565b62000330816200032984546200026d565b84620002a9565b602080601f8311600181146200036857600084156200034f5750858301515b600019600386901b1c1916600185901b178555620002f3565b600085815260208120601f198616915b82811015620003995788860151825594840194600190910190840162000378565b5085821015620003b85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612a0b80620003d86000396000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c8063715018a611610160578063b77ff87b116100d8578063cf252f3b1161008c578063deab98fe11610071578063deab98fe1461063d578063e985e9c514610646578063f2fde38b1461068257600080fd5b8063cf252f3b14610622578063d57c6e6a1461063557600080fd5b8063c4f63578116100bd578063c4f6357814610551578063c87b56dd146105fc578063c99b407a1461060f57600080fd5b8063b77ff87b1461052b578063b88d4fde1461053e57600080fd5b80638da5cb5b1161012f57806395e8bb231161011457806395e8bb23146104df578063a22cb465146104e8578063b5a57ec0146104fb57600080fd5b80638da5cb5b146104c657806395d89b41146104d757600080fd5b8063715018a614610455578063730cb6511461045d5780637b5d7eb714610485578063847e44a8146104b357600080fd5b806323b872dd1161020e57806342a481d8116101c25780636352211e116101a75780636352211e146104275780636f307dc31461043a57806370a082311461044257600080fd5b806342a481d814610401578063544f4ac81461041457600080fd5b80632dc3ceeb116101f35780632dc3ceeb146103ba578063383121fc146103e557806342842e0e146103ee57600080fd5b806323b872dd1461039e57806329f0725e146103b157600080fd5b8063095ea7b3116102655780631a88bc661161024a5780631a88bc66146103335780631bc28aa71461033c57806322f3e2d41461039157600080fd5b8063095ea7b3146103095780630a1d46ac1461031c57600080fd5b806301ffc9a71461029757806306fdde03146102bf57806307da68f5146102d4578063081812fc146102de575b600080fd5b6102aa6102a5366004612481565b610695565b60405190151581526020015b60405180910390f35b6102c76106e7565b6040516102b691906124ee565b6102dc610779565b005b6102f16102ec366004612501565b61078d565b6040516001600160a01b0390911681526020016102b6565b6102dc610317366004612536565b6107b4565b610325600a5481565b6040519081526020016102b6565b610325600c5481565b61034f61034a366004612501565b6108ce565b6040516102b69190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b600f546102aa9060ff1681565b6102dc6103ac366004612560565b61098b565b61032560115481565b6103256103c836600461259c565b601560209081526000928352604080842090915290825290205481565b610325600d5481565b6102dc6103fc366004612560565b610a02565b6102dc61040f3660046125be565b610a1d565b6102dc61042236600461260a565b610abc565b6102f1610435366004612501565b610b0f565b6102c7610b74565b61032561045036600461264d565b610c02565b6102dc610c9c565b61047061046b366004612668565b610cb0565b604080519283529015156020830152016102b6565b61049861049336600461259c565b610e36565b604080519384529115156020840152908201526060016102b6565b6016546102f1906001600160a01b031681565b6006546001600160a01b03166102f1565b6102c7610f20565b610325600e5481565b6102dc6104f63660046126b2565b610f2f565b61050e610509366004612536565b610f3e565b6040805193845260208401929092521515908201526060016102b6565b6103256105393660046126ee565b61108b565b6102dc61054c366004612736565b611139565b6105b261055f366004612501565b6013602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919060ff808216916101008104821691620100009091041689565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a0850152151560c0840152151560e08301521515610100820152610120016102b6565b6102c761060a366004612501565b6111b7565b6102dc61061d366004612501565b61122b565b61032561063036600461259c565b6112aa565b601054610325565b610325600b5481565b6102aa610654366004612812565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102dc61069036600461264d565b6112ce565b60006001600160e01b031982166380ac58cd60e01b14806106c657506001600160e01b03198216635b5e139f60e01b145b806106e157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546106f690612845565b80601f016020809104026020016040519081016040528092919081815260200182805461072290612845565b801561076f5780601f106107445761010080835404028352916020019161076f565b820191906000526020600020905b81548152906001019060200180831161075257829003601f168201915b5050505050905090565b61078161135e565b600f805460ff19169055565b6000610798826113b8565b506000908152600460205260409020546001600160a01b031690565b60006107bf82610b0f565b9050806001600160a01b0316836001600160a01b0316036108315760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061084d575061084d8133610654565b6108bf5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610828565b6108c9838361141c565b505050565b6109006040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6000828152600260205260409020546001600160a01b03161515151560011461093c57604051633f191cd360e11b815260040160405180910390fd5b50600090815260146020908152604091829020825160a0810184528154815260018201549281019290925260028101549282019290925260038201546060820152600490910154608082015290565b610995338261148a565b6109f75760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610828565b6108c9838383611508565b6108c983838360405180602001604052806000815250611139565b610a256116f5565b848610610a455760405163035eccb560e21b815260040160405180910390fd5b600a869055600b859055600c849055600d839055600e8290556010819055610a6c87611720565b600a54600b54600c5460408051938452602084019290925282820152517f0c382aed33dbcfae94a979417bb06063b09ecb1827dae9a55a252066bd91f7709181900360600190a150505050505050565b610ac46116f5565b60095460ff1615610ae85760405163c8c4f53960e01b815260040160405180910390fd5b610afa8585858585620151808c610a1d565b50506009805460ff1916600117905550505050565b6000818152600260205260408120546001600160a01b0316806106e15760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610828565b60088054610b8190612845565b80601f0160208091040260200160405190810160405280929190818152602001828054610bad90612845565b8015610bfa5780601f10610bcf57610100808354040283529160200191610bfa565b820191906000526020600020905b815481529060010190602001808311610bdd57829003601f168201915b505050505081565b60006001600160a01b038216610c805760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610828565b506001600160a01b031660009081526003602052604090205490565b610ca461135e565b610cae60006117b0565b565b600080610cbb6116f5565b610cc3611802565b610ccc8461182a565b610cd584611867565b610cdf86866118ac565b60008481526013602052604081208054600190910154610cff91906112aa565b90506000610d0f8689898861108b565b60008781526013602052604081206001015491925090610d35908390610630908d6118fa565b90506000610d5a8483601360008c815260200190815260200160002060020154611906565b9050801515600003610d7f57604051633d327ce960e01b815260040160405180910390fd5b610d8a88848d6119f7565b610d988c898d8a8e8e611a74565b610da48a8a898b611b1a565b604080518c815260208101899052908101899052606081018b9052608081018a90526001600160a01b038d16907fce4169502e4ec788f06e096a7c876ac9e3c1102bdc6cb2089a3b41e0a7f594509060a00160405180910390a2818411610e1657610e0f8285611bbd565b6001610e23565b610e208285611bbd565b60005b9550955050505050965096945050505050565b6000806000610e436116f5565b610e4b611802565b610e548561182a565b42851115610e75576040516350348d9960e11b815260040160405180910390fd5b6000806000610e848888611bc9565b60008b815260136020526040908190206004810185905560068101805460ff19861515610100021661ffff199091161760011790556003018b90555192955090935091507f244fde768f62374a3fc7dd5fe2ec92d74f3ed5062a5effd497671b17609f4a8990610f0a908a90859087909283529015156020830152604082015260600190565b60405180910390a1919450925090509250925092565b6060600180546106f690612845565b610f3a338383611c87565b5050565b6000806000610f4b6116f5565b6000610f56856108ce565b805160009081526013602090815260409182902082516101208101845281548152600180830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460ff808216151560c085018190526101008084048316151560e08701526201000090930490911615159184019190915292935090911461100557604051634fb5b58360e01b815260040160405180910390fd5b866001600160a01b031661101887610b0f565b6001600160a01b03161461103f57604051636b46b10d60e11b815260040160405180910390fd5b6000808360600151836060015110158015611061575083608001518360600151105b15611070575050604082015160015b61107988611d55565b92519095509350909150509250925092565b600084815260136020526040812054600c5482906110b3906110ad8789611bbd565b90611df8565b905060005b81811161112b5760006110e06110d9600c5484611e0490919063ffffffff16565b89906118fa565b60008a81526015602090815260408083208484529091528120549192509061110890886118fa565b905080851015611116578094505b5050808061112390612895565b9150506110b8565b50909150505b949350505050565b611143338361148a565b6111a55760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610828565b6111b184848484611e10565b50505050565b60606111c2826113b8565b60006111d960408051602081019091526000815290565b905060008151116111f95760405180602001604052806000815250611224565b8061120384611e99565b6040516020016112149291906128ae565b6040516020818303038152906040525b9392505050565b6112336116f5565b61123b611f39565b611243611f60565b60006011546010541161126457600e5460115461125f916118fa565b611273565b600e54601054611273916118fa565b6000818152601360205260408120600601549192506201000090910460ff1615159003610f3a576112a48183611f90565b60115550565b6000818311156112c5576112be8383611bbd565b90506106e1565b50600092915050565b6112d661135e565b6001600160a01b0381166113525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610828565b61135b816117b0565b50565b6006546001600160a01b03163314610cae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610828565b6000818152600260205260409020546001600160a01b031661135b5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610828565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061145182610b0f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061149683610b0f565b9050806001600160a01b0316846001600160a01b031614806114dd57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806111315750836001600160a01b03166114f68461078d565b6001600160a01b031614949350505050565b826001600160a01b031661151b82610b0f565b6001600160a01b03161461157f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610828565b6001600160a01b0382166115e15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610828565b6115ee8383836001612008565b826001600160a01b031661160182610b0f565b6001600160a01b0316146116655760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610828565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6016546001600160a01b03163314610cae576040516337637c4b60e11b815260040160405180910390fd5b600061173f600e546110ad600a54600b54611bbd90919063ffffffff16565b905060005b8181101561178e57600061176f61176683600e54611e0490919063ffffffff16565b601054906118fa565b905061177b8185611f90565b508061178681612895565b915050611744565b506117a96117666117a0836001611bbd565b600e5490611e04565b6011555050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60095460ff161515600114610cae5760405163a4ca20e760e01b815260040160405180910390fd5b60008181526013602052604090206006015462010000900460ff16151560011461135b5760405163069b0e6f60e11b815260040160405180910390fd5b600a546118759042906118fa565b81108061188e5750600b5461188b9042906118fa565b81115b1561135b57604051637440fc5760e11b815260040160405180910390fd5b600c546118b990836128f3565b1515806118d15750600c546118ce90826128f3565b15155b806118dc5750808210155b15610f3a576040516393dff19360e01b815260040160405180910390fd5b60006112248284612907565b6000806000601660009054906101000a90046001600160a01b03166001600160a01b0316639e1055696040518163ffffffff1660e01b81526004016040805180830381865afa15801561195d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611981919061291a565b90925090506000611999620f42406110ad8588611e04565b9050808611156119af5760009350505050611224565b60008787116119bf5760006119c9565b6119c98789611bbd565b90506119d58484611bbd565b8111156119e9576000945050505050611224565b506001979650505050505050565b6000838152601360205260409020600181015490839055611a1881836118fa565b60008581526013602090815260409182902060010183905581518781529081019290925281018490527f682f3f48ff66f01db3029ced37bc0d4b5c656a4aadd4f610e3ac4e456ce707369060600160405180910390a150505050565b611a82600780546001019055565b6000611a8d60075490565b9050611a998782612090565b611acb6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6020808201968752606082019485526080820193845260408083019687529782526000928352601490529590209451855592516001850155905160028401555160038301555160049091015550565b600c54600090611b2e906110ad8688611bbd565b905060005b81811015611bb5576000611b5c611b55600c5484611e0490919063ffffffff16565b88906118fa565b6000858152601560209081526040808320848452909152902054909150611b8381876118fa565b600086815260156020908152604080832095835294905292909220919091555080611bad81612895565b915050611b33565b505050505050565b6000611224828461293e565b600082815260136020526040812060010154600c5482918291829182918290611bf290896128f3565b600003611c19575060008881526015602090815260408083208a8452909152902054611c55565b6000898152601560205260408120600c54909190611c4390611c3c908c90612229565b8b90611bbd565b81526020019081526020016000205490505b808211925082611c6e57611c698183611bbd565b611c78565b611c788282611bbd565b99929850965090945050505050565b816001600160a01b0316836001600160a01b031603611ce85760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610828565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000611d6082610b0f565b9050611d70816000846001612008565b611d7982610b0f565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006112248284612951565b60006112248284612965565b611e1b848484611508565b611e2784848484612235565b6111b15760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610828565b60606000611ea683612389565b600101905060008167ffffffffffffffff811115611ec657611ec6612720565b6040519080825280601f01601f191660200182016040528015611ef0576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611efa57509392505050565b600f5460ff161515600003610cae576040516296355960e01b815260040160405180910390fd5b6000611f79600e546011546118fa90919063ffffffff16565b905061188b600b54426118fa90919063ffffffff16565b600082815260136020526040908190206002810183905560068101805462ff0000191662010000179055600c54600590910155517fc0cfe220d3ed4f05a97ca643568708f06b250ad2244ef8bfc62d3ad8131ac73990611ffc9084908490918252602082015260400190565b60405180910390a15050565b60018111156111b1576001600160a01b0384161561204e576001600160a01b0384166000908152600360205260408120805483929061204890849061293e565b90915550505b6001600160a01b038316156111b1576001600160a01b03831660009081526003602052604081208054839290612085908490612907565b909155505050505050565b6001600160a01b0382166120e65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610828565b6000818152600260205260409020546001600160a01b03161561214b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610828565b612159600083836001612008565b6000818152600260205260409020546001600160a01b0316156121be5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610828565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061122482846128f3565b60006001600160a01b0384163b1561238157604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061227990339089908890889060040161297c565b6020604051808303816000875af19250505080156122b4575060408051601f3d908101601f191682019092526122b1918101906129b8565b60015b612367573d8080156122e2576040519150601f19603f3d011682016040523d82523d6000602084013e6122e7565b606091505b50805160000361235f5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610828565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611131565b506001611131565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106123d2577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106123fe576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061241c57662386f26fc10000830492506010015b6305f5e1008310612434576305f5e100830492506008015b612710831061244857612710830492506004015b6064831061245a576064830492506002015b600a83106106e15760010192915050565b6001600160e01b03198116811461135b57600080fd5b60006020828403121561249357600080fd5b81356112248161246b565b60005b838110156124b95781810151838201526020016124a1565b50506000910152565b600081518084526124da81602086016020860161249e565b601f01601f19169290920160200192915050565b60208152600061122460208301846124c2565b60006020828403121561251357600080fd5b5035919050565b80356001600160a01b038116811461253157600080fd5b919050565b6000806040838503121561254957600080fd5b6125528361251a565b946020939093013593505050565b60008060006060848603121561257557600080fd5b61257e8461251a565b925061258c6020850161251a565b9150604084013590509250925092565b600080604083850312156125af57600080fd5b50508035926020909101359150565b600080600080600080600060e0888a0312156125d957600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b60008060008060008060c0878903121561262357600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60006020828403121561265f57600080fd5b6112248261251a565b60008060008060008060c0878903121561268157600080fd5b61268a8761251a565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b600080604083850312156126c557600080fd5b6126ce8361251a565b9150602083013580151581146126e357600080fd5b809150509250929050565b6000806000806080858703121561270457600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561274c57600080fd5b6127558561251a565b93506127636020860161251a565b925060408501359150606085013567ffffffffffffffff8082111561278757600080fd5b818701915087601f83011261279b57600080fd5b8135818111156127ad576127ad612720565b604051601f8201601f19908116603f011681019083821181831017156127d5576127d5612720565b816040528281528a60208487010111156127ee57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561282557600080fd5b61282e8361251a565b915061283c6020840161251a565b90509250929050565b600181811c9082168061285957607f821691505b60208210810361287957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016128a7576128a761287f565b5060010190565b600083516128c081846020880161249e565b8351908301906128d481836020880161249e565b01949350505050565b634e487b7160e01b600052601260045260246000fd5b600082612902576129026128dd565b500690565b808201808211156106e1576106e161287f565b6000806040838503121561292d57600080fd5b505080516020909101519092909150565b818103818111156106e1576106e161287f565b600082612960576129606128dd565b500490565b80820281158282048414176106e1576106e161287f565b60006001600160a01b038087168352808616602084015250836040830152608060608301526129ae60808301846124c2565b9695505050505050565b6000602082840312156129ca57600080fd5b81516112248161246b56fea2646970667358221220a53dc7b368f824c8b76cf95973442e0c5b80ada6c512d47d42605cf87796f6f964736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "params": {
          "_defiBetsManager": "- the manager and owner of the contract. "
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 370,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 372,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 376,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 380,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 384,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 390,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 53,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3347,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "tokenIds",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1808_storage"
      },
      {
        "astId": 3349,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "underlying",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 3351,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "initialized",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 3353,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "minBetDuration",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3355,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "maxBetDuration",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3357,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "slot",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3359,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "maxWinMultiplier",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3361,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "timeDelta",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3363,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "isActive",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 3365,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "dependentTimeStamp",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3367,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "lastActiveExpTime",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3371,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "validExpTime",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3376,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "expTimeInfos",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_struct(ExpTimeInfo)3330_storage)"
      },
      {
        "astId": 3381,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "bets",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_struct(Bet)3341_storage)"
      },
      {
        "astId": 3387,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "betsWinningSlots",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3389,
        "contract": "contracts/core/DefiBets.sol:DefiBets",
        "label": "defiBetsManager",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Bet)3341_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DefiBets.Bet)",
        "numberOfBytes": "32",
        "value": "t_struct(Bet)3341_storage"
      },
      "t_mapping(t_uint256,t_struct(ExpTimeInfo)3330_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DefiBets.ExpTimeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ExpTimeInfo)3330_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bet)3341_storage": {
        "encoding": "inplace",
        "label": "struct DefiBets.Bet",
        "members": [
          {
            "astId": 3332,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "expTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3334,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "betSize",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3336,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "profit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3338,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "minPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3340,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "maxPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Counter)1808_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1807,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ExpTimeInfo)3330_storage": {
        "encoding": "inplace",
        "label": "struct DefiBets.ExpTimeInfo",
        "members": [
          {
            "astId": 3313,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "maxUserWinning",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3315,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "totalBets",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3317,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "maxLossLimit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3319,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "expPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3321,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "deltaValue",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3323,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "slotSize",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3325,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "finished",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 3327,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "profit",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 3329,
            "contract": "contracts/core/DefiBets.sol:DefiBets",
            "label": "init",
            "offset": 2,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}