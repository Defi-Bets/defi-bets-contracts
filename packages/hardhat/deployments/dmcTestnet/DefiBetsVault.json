{
  "address": "0xFB57076f47Cb0f2390BB6AbCba4AE453f965b10E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defibetsManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DefiBetsVault__Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBetsVault__NotEnoughFunds",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFees",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FessWithdrawd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupply",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "defiBetsManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fees",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFromLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "expTimeSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa658c377878877a524764568c526851b59d94ed06b29e2c3c99badbeb2174ad",
  "receipt": {
    "to": null,
    "from": "0x36375828fd821935cFf3E8AB6322cAb54BBfaDeC",
    "contractAddress": "0xFB57076f47Cb0f2390BB6AbCba4AE453f965b10E",
    "transactionIndex": 0,
    "gasUsed": "608771",
    "logsBloom": "0x
    "blockHash": "0xd375958d2a30121f8e95a09054843527ab6e01111f78d74d53679ca3af220b1a",
    "transactionHash": "0xaa658c377878877a524764568c526851b59d94ed06b29e2c3c99badbeb2174ad",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 93734,
        "transactionHash": "0xaa658c377878877a524764568c526851b59d94ed06b29e2c3c99badbeb2174ad",
        "address": "0xFB57076f47Cb0f2390BB6AbCba4AE453f965b10E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000036375828fd821935cff3e8ab6322cab54bbfadec"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd375958d2a30121f8e95a09054843527ab6e01111f78d74d53679ca3af220b1a"
      }
    ],
    "blockNumber": 93734,
    "cumulativeGasUsed": "608771",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1E3E5EE0a300143e7B8be3dd293E34518938d44C",
    "0xE815f2aD238B218E6becb93d846EA8FF90eDB39C"
  ],
  "numDeployments": 1,
  "solcInputHash": "83625d2dc91b0dda7c7452e5b3cee9d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defibetsManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DefiBetsVault__Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBetsVault__NotEnoughFunds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FessWithdrawd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"defiBetsManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFromLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expTimeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/DefiBetsVault.sol\":\"DefiBetsVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/core/DefiBetsVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interface/core/IDefiBetsVault.sol\\\";\\r\\n\\r\\nerror DefiBetsVault__Forbidden();\\r\\nerror DefiBetsVault__NotEnoughFunds();\\r\\n\\r\\ncontract DefiBetsVault is IDefiBetsVault,Ownable{\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /* ====== State Variables ====== */\\r\\n\\r\\n    uint256 public totalFees;\\r\\n\\r\\n    mapping(uint256 => uint256) public expTimeSupply;\\r\\n\\r\\n    address public token;\\r\\n    address public defiBetsManager;\\r\\n\\r\\n\\r\\n    constructor(address _defibetsManager,address _token){\\r\\n        defiBetsManager = _defibetsManager;\\r\\n        token = _token;\\r\\n    }\\r\\n\\r\\n    /* ====== Mutation Functions ====== */\\r\\n\\r\\n    function deposit(address _from,uint256 _amount,uint256 _expTime,uint256 _fees) external {\\r\\n\\r\\n        _isManager();\\r\\n\\r\\n        bool _success = IERC20(token).transferFrom(_from,address(this),_amount.add(_fees));\\r\\n\\r\\n        require(_success);\\r\\n\\r\\n        \\r\\n        uint256 _totalFees = totalFees;\\r\\n        \\r\\n        uint256 _supply = expTimeSupply[_expTime];\\r\\n        expTimeSupply[_expTime] = _supply.add(_amount);\\r\\n        \\r\\n        totalFees = _totalFees.add(_fees);\\r\\n\\r\\n        emit Deposit(_expTime,_amount,expTimeSupply[_expTime],totalFees);\\r\\n    }\\r\\n\\r\\n    function withdraw(address _to,uint256 _amount,uint256 _expTime) external  {\\r\\n\\r\\n        _isManager();\\r\\n\\r\\n        uint256 _supply = expTimeSupply[_expTime];\\r\\n\\r\\n        if(_supply < _amount){\\r\\n            revert DefiBetsVault__NotEnoughFunds();\\r\\n        }\\r\\n\\r\\n        bool _success =IERC20(token).transfer(_to,_amount);\\r\\n\\r\\n        require(_success);\\r\\n\\r\\n        expTimeSupply[_expTime] = _supply.sub(_amount);\\r\\n\\r\\n\\r\\n        emit Withdraw(_to,_amount,_expTime,expTimeSupply[_expTime]);\\r\\n    }\\r\\n\\r\\n    function depositFromLP(uint256 _expTime,uint256 _amount) external {\\r\\n        _isManager();\\r\\n\\r\\n        _updateSupply(_expTime,_amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdrawFees() external onlyOwner(){\\r\\n        uint256 _totalFees = totalFees;\\r\\n\\r\\n        bool _success = IERC20(token).transfer(owner(), _totalFees);\\r\\n\\r\\n        if(_success){\\r\\n            totalFees = 0;\\r\\n        }\\r\\n\\r\\n        emit FessWithdrawd(_totalFees);\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    /* ====== Internal Functions ====== */\\r\\n\\r\\n    function _isManager() internal view {\\r\\n        if(msg.sender != defiBetsManager){\\r\\n            revert DefiBetsVault__Forbidden();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateSupply(uint256 _expTime,uint256 _amount) internal {\\r\\n        uint256 _supply = expTimeSupply[_expTime];\\r\\n        expTimeSupply[_expTime] = _supply.add(_amount);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x8e6eec4e7f807371740d7cb4d10c08724963fe137237096592f276773c1c9223\",\"license\":\"MIT\"},\"contracts/interface/core/IDefiBetsVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IDefiBetsVault {\\r\\n\\r\\n    event Deposit(uint256 expTime,uint256 amount,uint256 supply,uint256 totalFees);\\r\\n    event Withdraw(address indexed to,uint256 amount,uint256 expTime,uint256 newSupply);\\r\\n    event FessWithdrawd(uint256 amount);\\r\\n\\r\\n    function deposit(address _from,uint256 _amount,uint256 _expTime,uint256 _fees) external;\\r\\n\\r\\n    function withdraw(address _to,uint256 _amount,uint256 _expTime) external;\\r\\n\\r\\n    function depositFromLP(uint256 _expTime,uint256 _amount) external;\\r\\n\\r\\n}\",\"keccak256\":\"0x96f3869eaa79c68c68964334bb161652d73af1abb8a2c094f60c1c4574159b69\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516109d73803806109d783398101604081905261002f916100d5565b61003833610069565b600480546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055610108565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100d057600080fd5b919050565b600080604083850312156100e857600080fd5b6100f1836100b9565b91506100ff602084016100b9565b90509250929050565b6108c0806101176000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063847e44a811610081578063ce88b4391161005b578063ce88b4391461017e578063f2fde38b14610191578063fc0c546a146101a457600080fd5b8063847e44a81461012f5780638da5cb5b1461015a578063b5c5f6721461016b57600080fd5b80633ad6d8b4116100b25780633ad6d8b41461010a578063476343ee1461011f578063715018a61461012757600080fd5b806307f0af98146100ce57806313114a9d14610101575b600080fd5b6100ee6100dc366004610747565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b6100ee60015481565b61011d610118366004610760565b6101b7565b005b61011d6101cd565b61011d6102cc565b600454610142906001600160a01b031681565b6040516001600160a01b0390911681526020016100f8565b6000546001600160a01b0316610142565b61011d61017936600461079e565b6102e0565b61011d61018c3660046107d1565b61040c565b61011d61019f36600461080a565b610574565b600354610142906001600160a01b031681565b6101bf610609565b6101c98282610634565b5050565b6101d5610664565b6001546003546000906001600160a01b031663a9059cbb6101fe6000546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015610263573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102879190610825565b905080156102955760006001555b6040518281527fbb47be849a478b6493a97ddfa3e2ff9f51a0ecb9bf8fb81bdc190bed7b83d34a9060200160405180910390a15050565b6102d4610664565b6102de60006106be565b565b6102e8610609565b6000818152600260205260409020548281101561031857604051630ada54eb60e11b815260040160405180910390fd5b60035460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052600092169063a9059cbb906044016020604051808303816000875af115801561036c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103909190610825565b90508061039c57600080fd5b6103a68285610726565b6000848152600260209081526040918290208390558151878152908101869052908101919091526001600160a01b038616907f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca949060600160405180910390a25050505050565b610414610609565b6003546000906001600160a01b03166323b872dd8630610434888761073b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610825565b9050806104d057600080fd5b6001546000848152600260205260409020546104ec818761073b565b600086815260026020526040902055610505828561073b565b6001819055600086815260026020526040908190205490517f9b776d199f09c774f5b205c9bc2ac6f40d508c347aaea919867eeaf06ebef0e9926105639289928b929093845260208401929092526040830152606082015260800190565b60405180910390a150505050505050565b61057c610664565b6001600160a01b0381166105fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610606816106be565b50565b6004546001600160a01b031633146102de5760405163155e074960e31b815260040160405180910390fd5b60008281526002602052604090205461064d818361073b565b600093845260026020526040909320929092555050565b6000546001600160a01b031633146102de5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f4565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006107328284610864565b90505b92915050565b60006107328284610877565b60006020828403121561075957600080fd5b5035919050565b6000806040838503121561077357600080fd5b50508035926020909101359150565b80356001600160a01b038116811461079957600080fd5b919050565b6000806000606084860312156107b357600080fd5b6107bc84610782565b95602085013595506040909401359392505050565b600080600080608085870312156107e757600080fd5b6107f085610782565b966020860135965060408601359560600135945092505050565b60006020828403121561081c57600080fd5b61073282610782565b60006020828403121561083757600080fd5b8151801515811461084757600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156107355761073561084e565b808201808211156107355761073561084e56fea26469706673582212201dc1ed5d77d5f495f7a3730bd9db3b3f32c6a62b78809cd4f52ed07ac40de1be64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c8063847e44a811610081578063ce88b4391161005b578063ce88b4391461017e578063f2fde38b14610191578063fc0c546a146101a457600080fd5b8063847e44a81461012f5780638da5cb5b1461015a578063b5c5f6721461016b57600080fd5b80633ad6d8b4116100b25780633ad6d8b41461010a578063476343ee1461011f578063715018a61461012757600080fd5b806307f0af98146100ce57806313114a9d14610101575b600080fd5b6100ee6100dc366004610747565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b6100ee60015481565b61011d610118366004610760565b6101b7565b005b61011d6101cd565b61011d6102cc565b600454610142906001600160a01b031681565b6040516001600160a01b0390911681526020016100f8565b6000546001600160a01b0316610142565b61011d61017936600461079e565b6102e0565b61011d61018c3660046107d1565b61040c565b61011d61019f36600461080a565b610574565b600354610142906001600160a01b031681565b6101bf610609565b6101c98282610634565b5050565b6101d5610664565b6001546003546000906001600160a01b031663a9059cbb6101fe6000546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015610263573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102879190610825565b905080156102955760006001555b6040518281527fbb47be849a478b6493a97ddfa3e2ff9f51a0ecb9bf8fb81bdc190bed7b83d34a9060200160405180910390a15050565b6102d4610664565b6102de60006106be565b565b6102e8610609565b6000818152600260205260409020548281101561031857604051630ada54eb60e11b815260040160405180910390fd5b60035460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052600092169063a9059cbb906044016020604051808303816000875af115801561036c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103909190610825565b90508061039c57600080fd5b6103a68285610726565b6000848152600260209081526040918290208390558151878152908101869052908101919091526001600160a01b038616907f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca949060600160405180910390a25050505050565b610414610609565b6003546000906001600160a01b03166323b872dd8630610434888761073b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610825565b9050806104d057600080fd5b6001546000848152600260205260409020546104ec818761073b565b600086815260026020526040902055610505828561073b565b6001819055600086815260026020526040908190205490517f9b776d199f09c774f5b205c9bc2ac6f40d508c347aaea919867eeaf06ebef0e9926105639289928b929093845260208401929092526040830152606082015260800190565b60405180910390a150505050505050565b61057c610664565b6001600160a01b0381166105fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610606816106be565b50565b6004546001600160a01b031633146102de5760405163155e074960e31b815260040160405180910390fd5b60008281526002602052604090205461064d818361073b565b600093845260026020526040909320929092555050565b6000546001600160a01b031633146102de5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f4565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006107328284610864565b90505b92915050565b60006107328284610877565b60006020828403121561075957600080fd5b5035919050565b6000806040838503121561077357600080fd5b50508035926020909101359150565b80356001600160a01b038116811461079957600080fd5b919050565b6000806000606084860312156107b357600080fd5b6107bc84610782565b95602085013595506040909401359392505050565b600080600080608085870312156107e757600080fd5b6107f085610782565b966020860135965060408601359560600135945092505050565b60006020828403121561081c57600080fd5b61073282610782565b60006020828403121561083757600080fd5b8151801515811461084757600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156107355761073561084e565b808201808211156107355761073561084e56fea26469706673582212201dc1ed5d77d5f495f7a3730bd9db3b3f32c6a62b78809cd4f52ed07ac40de1be64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/core/DefiBetsVault.sol:DefiBetsVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6733,
        "contract": "contracts/core/DefiBetsVault.sol:DefiBetsVault",
        "label": "totalFees",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6737,
        "contract": "contracts/core/DefiBetsVault.sol:DefiBetsVault",
        "label": "expTimeSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6739,
        "contract": "contracts/core/DefiBetsVault.sol:DefiBetsVault",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6741,
        "contract": "contracts/core/DefiBetsVault.sol:DefiBetsVault",
        "label": "defiBetsManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}